{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Stable Diffusion Dream Script This is a fork of CompVis/stable-diffusion , the open source text-to-image generator. It provides a streamlined process with various new features and options to aid the image generation process. It runs on Windows, Mac and Linux machines, and runs on GPU cards with as little as 4 GB or RAM. Note: This fork is rapidly evolving. Please use the Issues tab to report bugs and make feature requests. Be sure to use the provided templates. They will help aid diagnose issues faster. Installation # This fork is supported across multiple platforms. You can find individual installation instructions below. Linux Windows Macintosh Hardware Requirements # System # You wil need one of the following: An NVIDIA-based graphics card with 4 GB or more VRAM memory. An Apple computer with an M1 chip. Memory # At least 12 GB Main Memory RAM. Disk # At least 6 GB of free disk space for the machine learning model, Python, and all its dependencies. Note # If you are have a Nvidia 10xx series card (e.g. the 1080ti), please run the dream script in full-precision mode as shown below. Similarly, specify full-precision mode on Apple M1 hardware. To run in full-precision mode, start dream.py with the --full_precision flag: ( ldm ) ~/stable-diffusion$ python scripts/dream.py --full_precision Features # Major Features # Interactive Command Line Interface Image To Image Inpainting Support GFPGAN and Real-ESRGAN Support Seamless Tiling Google Colab Web Server Reading Prompts From File Shortcut: Reusing Seeds Weighted Prompts Variations Personalizing Text-to-Image Generation Simplified API for text to image generation Other Features # Creating Transparent Regions for Inpainting Preload Models Latest Changes # v1.14 (11 September 2022) # Memory optimizations for small-RAM cards. 512x512 now possible on 4 GB GPUs. Full support for Apple hardware with M1 or M2 chips. Add \"seamless mode\" for circular tiling of image. Generates beautiful effects. ( prixt ). Inpainting support. Improved web server GUI. Lots of code and documentation cleanups. v1.13 (3 September 2022 # Support image variations (see VARIATIONS ( Kevin Gibbons and many contributors and reviewers) Supports a Google Colab notebook for a standalone server running on Google hardware Arturo Mendivil WebUI supports GFPGAN/ESRGAN facial reconstruction and upscaling Kevin Gibbons WebUI supports incremental display of in-progress images during generation Kevin Gibbons A new configuration file scheme that allows new models (including upcoming stable-diffusion-v1.5) to be added without altering the code. ( David Wager ) Can specify --grid on dream.py command line as the default. Miscellaneous internal bug and stability fixes. Works on M1 Apple hardware. Multiple bug fixes. For older changelogs, please visit the CHANGELOG . Troubleshooting # Please check out our Q&A to get solutions for common installation problems and other issues. Contributing # Anyone who wishes to contribute to this project, whether documentation, features, bug fixes, code cleanup, testing, or code reviews, is very much encouraged to do so. If you are unfamiliar with how to contribute to GitHub projects, here is a Getting Started Guide . A full set of contribution guidelines, along with templates, are in progress, but for now the most important thing is to make your pull request against the \"development\" branch , and not against \"main\". This will help keep public breakage to a minimum and will allow you to propose more radical changes. Contributors # This fork is a combined effort of various people from across the world. Check out the list of all these amazing people . We thank them for their time, hard work and effort. Support # For support, please use this repository's GitHub Issues tracking service. Feel free to send me an email if you use and like the script. Original portions of the software are Copyright \u00a9 2020 Lincoln D. Stein Further Reading # Please see the original README for more information on this software and underlying algorithm, located in the file README-CompViz.md .","title":"Home"},{"location":"#installation","text":"This fork is supported across multiple platforms. You can find individual installation instructions below. Linux Windows Macintosh","title":"Installation"},{"location":"#hardware-requirements","text":"","title":"Hardware Requirements"},{"location":"#system","text":"You wil need one of the following: An NVIDIA-based graphics card with 4 GB or more VRAM memory. An Apple computer with an M1 chip.","title":"System"},{"location":"#memory","text":"At least 12 GB Main Memory RAM.","title":"Memory"},{"location":"#disk","text":"At least 6 GB of free disk space for the machine learning model, Python, and all its dependencies.","title":"Disk"},{"location":"#note","text":"If you are have a Nvidia 10xx series card (e.g. the 1080ti), please run the dream script in full-precision mode as shown below. Similarly, specify full-precision mode on Apple M1 hardware. To run in full-precision mode, start dream.py with the --full_precision flag: ( ldm ) ~/stable-diffusion$ python scripts/dream.py --full_precision","title":"Note"},{"location":"#features","text":"","title":"Features"},{"location":"#major-features","text":"Interactive Command Line Interface Image To Image Inpainting Support GFPGAN and Real-ESRGAN Support Seamless Tiling Google Colab Web Server Reading Prompts From File Shortcut: Reusing Seeds Weighted Prompts Variations Personalizing Text-to-Image Generation Simplified API for text to image generation","title":"Major Features"},{"location":"#other-features","text":"Creating Transparent Regions for Inpainting Preload Models","title":"Other Features"},{"location":"#latest-changes","text":"","title":"Latest Changes"},{"location":"#v114-11-september-2022","text":"Memory optimizations for small-RAM cards. 512x512 now possible on 4 GB GPUs. Full support for Apple hardware with M1 or M2 chips. Add \"seamless mode\" for circular tiling of image. Generates beautiful effects. ( prixt ). Inpainting support. Improved web server GUI. Lots of code and documentation cleanups.","title":"v1.14 (11 September 2022)"},{"location":"#v113-3-september-2022","text":"Support image variations (see VARIATIONS ( Kevin Gibbons and many contributors and reviewers) Supports a Google Colab notebook for a standalone server running on Google hardware Arturo Mendivil WebUI supports GFPGAN/ESRGAN facial reconstruction and upscaling Kevin Gibbons WebUI supports incremental display of in-progress images during generation Kevin Gibbons A new configuration file scheme that allows new models (including upcoming stable-diffusion-v1.5) to be added without altering the code. ( David Wager ) Can specify --grid on dream.py command line as the default. Miscellaneous internal bug and stability fixes. Works on M1 Apple hardware. Multiple bug fixes. For older changelogs, please visit the CHANGELOG .","title":"v1.13 (3 September 2022"},{"location":"#troubleshooting","text":"Please check out our Q&A to get solutions for common installation problems and other issues.","title":"Troubleshooting"},{"location":"#contributing","text":"Anyone who wishes to contribute to this project, whether documentation, features, bug fixes, code cleanup, testing, or code reviews, is very much encouraged to do so. If you are unfamiliar with how to contribute to GitHub projects, here is a Getting Started Guide . A full set of contribution guidelines, along with templates, are in progress, but for now the most important thing is to make your pull request against the \"development\" branch , and not against \"main\". This will help keep public breakage to a minimum and will allow you to propose more radical changes.","title":"Contributing"},{"location":"#contributors","text":"This fork is a combined effort of various people from across the world. Check out the list of all these amazing people . We thank them for their time, hard work and effort.","title":"Contributors"},{"location":"#support","text":"For support, please use this repository's GitHub Issues tracking service. Feel free to send me an email if you use and like the script. Original portions of the software are Copyright \u00a9 2020 Lincoln D. Stein","title":"Support"},{"location":"#further-reading","text":"Please see the original README for more information on this software and underlying algorithm, located in the file README-CompViz.md .","title":"Further Reading"},{"location":"features/CHANGELOG/","text":"v1.13 (in process) # Supports a Google Colab notebook for a standalone server running on Google hardware Arturo Mendivil WebUI supports GFPGAN/ESRGAN facial reconstruction and upscaling Kevin Gibbons WebUI supports incremental display of in-progress images during generation Kevin Gibbons Output directory can be specified on the dream> command line. The grid was displaying duplicated images when not enough images to fill the final row Muhammad Usama Can specify --grid on dream.py command line as the default. Miscellaneous internal bug and stability fixes. v1.12 (28 August 2022) # Improved file handling, including ability to read prompts from standard input. (kudos to Yunsaki The web server is now integrated with the dream.py script. Invoke by adding --web to the dream.py command arguments. Face restoration and upscaling via GFPGAN and Real-ESGAN are now automatically enabled if the GFPGAN directory is located as a sibling to Stable Diffusion. VRAM requirements are modestly reduced. Thanks to both Blessedcoolant and Oceanswave for their work on this. You can now swap samplers on the dream> command line. Blessedcoolant v1.11 (26 August 2022) # NEW FEATURE: Support upscaling and face enhancement using the GFPGAN module. (kudos to Oceanswave ) You now can specify a seed of -1 to use the previous image's seed, -2 to use the seed for the image generated before that, etc. Seed memory only extends back to the previous command, but will work on all images generated with the -n# switch. Variant generation support temporarily disabled pending more general solution. Created a feature branch named yunsaki-morphing-dream which adds experimental support for iteratively modifying the prompt and its parameters. Please see Pull Request #86 for a synopsis of how this works. Note that when this feature is eventually added to the main branch, it will may be modified significantly. v1.10 (25 August 2022) # A barebones but fully functional interactive web server for online generation of txt2img and img2img. v1.09 (24 August 2022) # A new -v option allows you to generate multiple variants of an initial image in img2img mode. (kudos to Oceanswave . See this discussion in the PR for examples and details on use ) Added ability to personalize text to image generation (kudos to Oceanswave and nicolai256 ) Enabled all of the samplers from k_diffusion v1.08 (24 August 2022) # Escape single quotes on the dream> command before trying to parse. This avoids parse errors. Removed instruction to get Python3.8 as first step in Windows install. Anaconda3 does it for you. Added bounds checks for numeric arguments that could cause crashes. Cleaned up the copyright and license agreement files. v1.07 (23 August 2022) # Image filenames will now never fill gaps in the sequence, but will be assigned the next higher name in the chosen directory. This ensures that the alphabetic and chronological sort orders are the same. v1.06 (23 August 2022) # Added weighted prompt support contributed by xraxra Example of using weighted prompts to tweak a demonic figure contributed by bmaltais v1.05 (22 August 2022 - after the drop) # Filenames now use the following formats: 000010.95183149.png -- Two files produced by the same command (e.g. -n2), 000010.26742632.png -- distinguished by a different seed. 000011.455191342.01.png -- Two files produced by the same command using 000011.455191342.02.png -- a batch size>1 (e.g. -b2). They have the same seed. 000011.4160627868.grid#1 -4.png -- a grid of four images (-g); the whole grid can be regenerated with the indicated key It should no longer be possible for one image to overwrite another You can use the \"cd\" and \"pwd\" commands at the dream> prompt to set and retrieve the path of the output directory. v1.04 (22 August 2022 - after the drop) # Updated README to reflect installation of the released weights. Suppressed very noisy and inconsequential warning when loading the frozen CLIP tokenizer. v1.03 (22 August 2022) # The original txt2img and img2img scripts from the CompViz repository have been moved into a subfolder named \"orig_scripts\", to reduce confusion. v1.02 (21 August 2022) # A copy of the prompt and all of its switches and options is now stored in the corresponding image in a tEXt metadata field named \"Dream\". You can read the prompt using scripts/images2prompt.py, or an image editor that allows you to explore the full metadata. Please run \"conda env update -f environment.yaml\" to load the k_lms dependencies!! v1.01 (21 August 2022) # added k_lms sampling. Please run \"conda env update -f environment.yaml\" to load the k_lms dependencies!! use half precision arithmetic by default, resulting in faster execution and lower memory requirements Pass argument --full_precision to dream.py to get slower but more accurate image generation","title":"Changelog"},{"location":"features/CHANGELOG/#v113-in-process","text":"Supports a Google Colab notebook for a standalone server running on Google hardware Arturo Mendivil WebUI supports GFPGAN/ESRGAN facial reconstruction and upscaling Kevin Gibbons WebUI supports incremental display of in-progress images during generation Kevin Gibbons Output directory can be specified on the dream> command line. The grid was displaying duplicated images when not enough images to fill the final row Muhammad Usama Can specify --grid on dream.py command line as the default. Miscellaneous internal bug and stability fixes.","title":"v1.13 (in process)"},{"location":"features/CHANGELOG/#v112-28-august-2022","text":"Improved file handling, including ability to read prompts from standard input. (kudos to Yunsaki The web server is now integrated with the dream.py script. Invoke by adding --web to the dream.py command arguments. Face restoration and upscaling via GFPGAN and Real-ESGAN are now automatically enabled if the GFPGAN directory is located as a sibling to Stable Diffusion. VRAM requirements are modestly reduced. Thanks to both Blessedcoolant and Oceanswave for their work on this. You can now swap samplers on the dream> command line. Blessedcoolant","title":"v1.12 (28 August 2022)"},{"location":"features/CHANGELOG/#v111-26-august-2022","text":"NEW FEATURE: Support upscaling and face enhancement using the GFPGAN module. (kudos to Oceanswave ) You now can specify a seed of -1 to use the previous image's seed, -2 to use the seed for the image generated before that, etc. Seed memory only extends back to the previous command, but will work on all images generated with the -n# switch. Variant generation support temporarily disabled pending more general solution. Created a feature branch named yunsaki-morphing-dream which adds experimental support for iteratively modifying the prompt and its parameters. Please see Pull Request #86 for a synopsis of how this works. Note that when this feature is eventually added to the main branch, it will may be modified significantly.","title":"v1.11 (26 August 2022)"},{"location":"features/CHANGELOG/#v110-25-august-2022","text":"A barebones but fully functional interactive web server for online generation of txt2img and img2img.","title":"v1.10 (25 August 2022)"},{"location":"features/CHANGELOG/#v109-24-august-2022","text":"A new -v option allows you to generate multiple variants of an initial image in img2img mode. (kudos to Oceanswave . See this discussion in the PR for examples and details on use ) Added ability to personalize text to image generation (kudos to Oceanswave and nicolai256 ) Enabled all of the samplers from k_diffusion","title":"v1.09 (24 August 2022)"},{"location":"features/CHANGELOG/#v108-24-august-2022","text":"Escape single quotes on the dream> command before trying to parse. This avoids parse errors. Removed instruction to get Python3.8 as first step in Windows install. Anaconda3 does it for you. Added bounds checks for numeric arguments that could cause crashes. Cleaned up the copyright and license agreement files.","title":"v1.08 (24 August 2022)"},{"location":"features/CHANGELOG/#v107-23-august-2022","text":"Image filenames will now never fill gaps in the sequence, but will be assigned the next higher name in the chosen directory. This ensures that the alphabetic and chronological sort orders are the same.","title":"v1.07 (23 August 2022)"},{"location":"features/CHANGELOG/#v106-23-august-2022","text":"Added weighted prompt support contributed by xraxra Example of using weighted prompts to tweak a demonic figure contributed by bmaltais","title":"v1.06 (23 August 2022)"},{"location":"features/CHANGELOG/#v105-22-august-2022-after-the-drop","text":"Filenames now use the following formats: 000010.95183149.png -- Two files produced by the same command (e.g. -n2), 000010.26742632.png -- distinguished by a different seed. 000011.455191342.01.png -- Two files produced by the same command using 000011.455191342.02.png -- a batch size>1 (e.g. -b2). They have the same seed. 000011.4160627868.grid#1 -4.png -- a grid of four images (-g); the whole grid can be regenerated with the indicated key It should no longer be possible for one image to overwrite another You can use the \"cd\" and \"pwd\" commands at the dream> prompt to set and retrieve the path of the output directory.","title":"v1.05 (22 August 2022 - after the drop)"},{"location":"features/CHANGELOG/#v104-22-august-2022-after-the-drop","text":"Updated README to reflect installation of the released weights. Suppressed very noisy and inconsequential warning when loading the frozen CLIP tokenizer.","title":"v1.04 (22 August 2022 - after the drop)"},{"location":"features/CHANGELOG/#v103-22-august-2022","text":"The original txt2img and img2img scripts from the CompViz repository have been moved into a subfolder named \"orig_scripts\", to reduce confusion.","title":"v1.03 (22 August 2022)"},{"location":"features/CHANGELOG/#v102-21-august-2022","text":"A copy of the prompt and all of its switches and options is now stored in the corresponding image in a tEXt metadata field named \"Dream\". You can read the prompt using scripts/images2prompt.py, or an image editor that allows you to explore the full metadata. Please run \"conda env update -f environment.yaml\" to load the k_lms dependencies!!","title":"v1.02 (21 August 2022)"},{"location":"features/CHANGELOG/#v101-21-august-2022","text":"added k_lms sampling. Please run \"conda env update -f environment.yaml\" to load the k_lms dependencies!! use half precision arithmetic by default, resulting in faster execution and lower memory requirements Pass argument --full_precision to dream.py to get slower but more accurate image generation","title":"v1.01 (21 August 2022)"},{"location":"features/CLI/","text":"Interactive Command Line Interface # The dream.py script, located in scripts/dream.py , provides an interactive interface to image generation similar to the \"dream mothership\" bot that Stable AI provided on its Discord server. Unlike the txt2img.py and img2img.py scripts provided in the original CompViz/stable-diffusion source code repository, the time-consuming initialization of the AI model initialization only happens once. After that image generation from the command-line interface is very fast. The script uses the readline library to allow for in-line editing, command history (up and down arrows), autocompletion, and more. To help keep track of which prompts generated which images, the script writes a log file of image names and prompts to the selected output directory. In addition, as of version 1.02, it also writes the prompt into the PNG file's metadata where it can be retrieved using scripts/images2prompt.py The script is confirmed to work on Linux, Windows and Mac systems. Note: This script runs from the command-line or can be used as a Web application. The Web GUI is currently rudimentary, but a much better replacement is on its way. ( ldm ) ~/stable-diffusion$ python3 ./scripts/dream.py * Initializing, be patient... Loading model from models/ldm/text2img-large/model.ckpt ( ...more initialization messages... ) * Initialization done ! Awaiting your command... dream> ashley judd riding a camel -n2 -s150 Outputs: outputs/img-samples/00009.png: \"ashley judd riding a camel\" -n2 -s150 -S 416354203 outputs/img-samples/00010.png: \"ashley judd riding a camel\" -n2 -s150 -S 1362479620 dream> \"there's a fly in my soup\" -n6 -g outputs/img-samples/00011.png: \"there's a fly in my soup\" -n6 -g -S 2685670268 seeds for individual rows: [ 2685670268 , 1216708065 , 2335773498 , 822223658 , 714542046 , 3395302430 ] dream> q # this shows how to retrieve the prompt stored in the saved image's metadata ( ldm ) ~/stable-diffusion$ python ./scripts/images2prompt.py outputs/img_samples/*.png 00009 .png: \"ashley judd riding a camel\" -s150 -S 416354203 00010 .png: \"ashley judd riding a camel\" -s150 -S 1362479620 00011 .png: \"there's a fly in my soup\" -n6 -g -S 2685670268 The dream> prompt's arguments are pretty much identical to those used in the Discord bot, except you don't need to type \"!dream\" (it doesn't hurt if you do). A significant change is that creation of individual images is now the default unless --grid (-g) is given. A full list is given in [List of prompt arguments] (#list-of-prompt-arguments). Arguments # The script itself also recognizes a series of command-line switches that will change important global defaults, such as the directory for image outputs and the location of the model weight files. List of arguments recognized at the command line # These command-line arguments can be passed to dream.py when you first run it from the Windows, Mac or Linux command line. Some set defaults that can be overridden on a per-prompt basis (see [List of prompt arguments] (#list-of-prompt-arguments). Others Argument Shortcut Default Description --help -h Print a concise help message. --outdir -o outputs/img_samples Location for generated images. --prompt_as_dir -p False Name output directories using the prompt text. --from_file None Read list of prompts from a file. Use \"-\" to read from standard input --model stable-diffusion-1.4 Loads model specified in configs/models.yaml. Currently one of \"stable-diffusion-1.4\" or \"laion400m\" --full_precision -F False Run in slower full-precision mode. Needed for Macintosh M1/M2 hardware and some older video cards. --web False Start in web server mode --host localhost Which network interface web server should listen on. Set to 0.0.0.0 to listen on any. --port 9090 Which port web server should listen for requests on. --config configs/models.yaml Configuration file for models and their weights. --iterations -n 1 How many images to generate per prompt. --grid -g False Save all image series as a grid rather than individually. --sampler -A k_lms Sampler to use. Use -h to get list of available samplers. --seamless False Create interesting effects by tiling elements of the image. --embedding_path None Path to pre-trained embedding manager checkpoints, for custom models --gfpgan_dir src/gfpgan Path to where GFPGAN is installed. --gfpgan_model_path experiments/pretrained_models /GFPGANv1.3.pth Path to GFPGAN model file, relative to --gfpgan_dir. --device -d torch.cuda.current_device() Device to run SD on, e.g. \"cuda:0\" These arguments are deprecated but still work: Argument Shortcut Default Description --weights None Pth to weights file; use --model stable-diffusion-1.4 instead --laion400m -l False Use older LAION400m weights; use --model=laion400m instead A note on path names: # On Windows systems, you may run into problems when passing the dream script standard backslashed path names because the Python interpreter treats \"\\\" as an escape. You can either double your slashes (ick): C:\\\\\\\\path\\\\\\\\to\\\\\\\\my\\\\\\\\file , or use Linux/Mac style forward slashes (better): C:/path/to/my/file . List of prompt arguments # After the dream.py script initializes, it will present you with a dream> prompt. Here you can enter information to generate images from text (txt2img), to embellish an existing image or sketch (img2img), or to selectively alter chosen regions of the image (inpainting). This is an example of txt2img # dream> \"waterfall and rainbow\" -W640 -H480 This will create the requested image with the dimensions 640 (width) and 480 (height). Those are the dream commands that apply to txt2img: Argument Shortcut Default Description \"my prompt\" Text prompt to use. The quotation marks are optional. --width -W 512 Width of generated image --height -H 512 Height of generated image --iterations -n 1 How many images to generate from this prompt --steps -s 50 How many steps of refinement to apply --cfg_scale -C 7.5 How hard to try to match the prompt to the generated image; any number greater than 0.0 works, but the useful range is roughly 5.0 to 20.0 --seed -S None Set the random seed for the next series of images. This can be used to recreate an image generated previously. --sampler -A k_lms Sampler to use. Use -h to get list of available samplers. --grid -g False Turn on grid mode to return a single image combining all the images generated by this prompt --individual -i True Turn off grid mode (deprecated; leave off --grid instead) --outdir -o outputs/img_samples Temporarily change the location of these images --seamless False Activate seamless tiling for interesting effects --log_tokenization -t False Display a color-coded list of the parsed tokens derived from the prompt --skip_normalization -x False Weighted subprompts will not be normalized. See Weighted Prompts --upscale -U -U 1 0.75 Upscale image by magnification factor (2, 4), and set strength of upscaling (0.0-1.0). If strength not set, will default to 0.75. --gfpgan_strength -G -G0 Fix faces using the GFPGAN algorithm; argument indicates how hard the algorithm should try (0.0-1.0) --save_original -save_orig False When upscaling or fixing faces, this will cause the original image to be saved rather than replaced. --variation -v 0.0 Add a bit of noise (0.0=none, 1.0=high) to the image in order to generate a series of variations. Usually used in combination with -S and -n to generate a series a riffs on a starting image. See Variations . --with_variations -V None Combine two or more variations. See Variations for now to use this. Note that the width and height of the image must be multiples of 64. You can provide different values, but they will be rounded down to the nearest multiple of 64. This is an example of img2img # dream> waterfall and rainbow -I./vacation-photo.png -W640 -H480 --fit This will modify the indicated vacation photograph by making it more like the prompt. Results will vary greatly depending on what is in the image. We also ask to --fit the image into a box no bigger than 640x480. Otherwise the image size will be identical to the provided photo and you may run out of memory if it is large. In addition to the command-line options recognized by txt2img, img2img accepts additional options: Argument Shortcut Default Description --init_img -I None Path to the initialization image --fit -F False Scale the image to fit into the specified -H and -W dimensions --strength -s 0.75 How hard to try to match the prompt to the initial image. Ranges from 0.0-0.99, with higher values replacing the initial image completely. This is an example of inpainting # dream> \"waterfall and rainbow\" -I./vacation-photo.png -M./vacation-mask.png -W640 -H480 --fit This will do the same thing as img2img, but image alterations will only occur within transparent areas defined by the mask file specified by -M. You may also supply just a single initial image with the areas to overpaint made transparent, but you must be careful not to destroy the pixels underneath when you create the transparent areas. See Inpainting for details. inpainting accepts all the arguments used for txt2img and img2img, as well as the --mask (-M) argument: Argument Shortcut Default Description --init_mask -M None Path to an image the same size as the initial_image, with areas for inpainting made transparent. Command-line editing and completion # If you are on a Macintosh or Linux machine, the command-line offers convenient history tracking, editing, and command completion. To scroll through previous commands and potentially edit/reuse them, use the up and down cursor keys. To edit the current command, use the left and right cursor keys to position the cursor, and then backspace, delete or insert characters. To move to the very beginning of the command, type CTRL-A (or command-A on the Mac) To move to the end of the command, type CTRL-E. To cut a section of the command, position the cursor where you want to start cutting and type CTRL-K. To paste a cut section back in, position the cursor where you want to paste, and type CTRL-Y Windows users can get similar, but more limited, functionality if they launch dream.py with the \"winpty\" program: > winpty python scripts\\dream.py On the Mac and Linux platforms, when you exit dream.py, the last 1000 lines of your command-line history will be saved. When you restart dream.py, you can access the saved history using the up-arrow key. In addition, limited command-line completion is installed. In various contexts, you can start typing your command and press tab. A list of potential completions will be presented to you. You can then type a little more, hit tab again, and eventually autocomplete what you want. When specifying file paths using the one-letter shortcuts, the CLI will attempt to complete pathnames for you. This is most handy for the -I (init image) and -M (init mask) paths. To initiate completion, start the path with a slash (\"/\") or \"./\". For example: dream> zebra with a mustache -I./test-pictures<TAB> -I./test-pictures/Lincoln-and-Parrot.png -I./test-pictures/zebra.jpg -I./test-pictures/madonna.png -I./test-pictures/bad-sketch.png -I./test-pictures/man_with_eagle/ You can then type \"z\", hit tab again, and it will autofill to \"zebra.jpg\". More text completion features (such as autocompleting seeds) are on their way.","title":"CLI"},{"location":"features/CLI/#interactive-command-line-interface","text":"The dream.py script, located in scripts/dream.py , provides an interactive interface to image generation similar to the \"dream mothership\" bot that Stable AI provided on its Discord server. Unlike the txt2img.py and img2img.py scripts provided in the original CompViz/stable-diffusion source code repository, the time-consuming initialization of the AI model initialization only happens once. After that image generation from the command-line interface is very fast. The script uses the readline library to allow for in-line editing, command history (up and down arrows), autocompletion, and more. To help keep track of which prompts generated which images, the script writes a log file of image names and prompts to the selected output directory. In addition, as of version 1.02, it also writes the prompt into the PNG file's metadata where it can be retrieved using scripts/images2prompt.py The script is confirmed to work on Linux, Windows and Mac systems. Note: This script runs from the command-line or can be used as a Web application. The Web GUI is currently rudimentary, but a much better replacement is on its way. ( ldm ) ~/stable-diffusion$ python3 ./scripts/dream.py * Initializing, be patient... Loading model from models/ldm/text2img-large/model.ckpt ( ...more initialization messages... ) * Initialization done ! Awaiting your command... dream> ashley judd riding a camel -n2 -s150 Outputs: outputs/img-samples/00009.png: \"ashley judd riding a camel\" -n2 -s150 -S 416354203 outputs/img-samples/00010.png: \"ashley judd riding a camel\" -n2 -s150 -S 1362479620 dream> \"there's a fly in my soup\" -n6 -g outputs/img-samples/00011.png: \"there's a fly in my soup\" -n6 -g -S 2685670268 seeds for individual rows: [ 2685670268 , 1216708065 , 2335773498 , 822223658 , 714542046 , 3395302430 ] dream> q # this shows how to retrieve the prompt stored in the saved image's metadata ( ldm ) ~/stable-diffusion$ python ./scripts/images2prompt.py outputs/img_samples/*.png 00009 .png: \"ashley judd riding a camel\" -s150 -S 416354203 00010 .png: \"ashley judd riding a camel\" -s150 -S 1362479620 00011 .png: \"there's a fly in my soup\" -n6 -g -S 2685670268 The dream> prompt's arguments are pretty much identical to those used in the Discord bot, except you don't need to type \"!dream\" (it doesn't hurt if you do). A significant change is that creation of individual images is now the default unless --grid (-g) is given. A full list is given in [List of prompt arguments] (#list-of-prompt-arguments).","title":"Interactive Command Line Interface"},{"location":"features/CLI/#arguments","text":"The script itself also recognizes a series of command-line switches that will change important global defaults, such as the directory for image outputs and the location of the model weight files.","title":"Arguments"},{"location":"features/CLI/#list-of-arguments-recognized-at-the-command-line","text":"These command-line arguments can be passed to dream.py when you first run it from the Windows, Mac or Linux command line. Some set defaults that can be overridden on a per-prompt basis (see [List of prompt arguments] (#list-of-prompt-arguments). Others Argument Shortcut Default Description --help -h Print a concise help message. --outdir -o outputs/img_samples Location for generated images. --prompt_as_dir -p False Name output directories using the prompt text. --from_file None Read list of prompts from a file. Use \"-\" to read from standard input --model stable-diffusion-1.4 Loads model specified in configs/models.yaml. Currently one of \"stable-diffusion-1.4\" or \"laion400m\" --full_precision -F False Run in slower full-precision mode. Needed for Macintosh M1/M2 hardware and some older video cards. --web False Start in web server mode --host localhost Which network interface web server should listen on. Set to 0.0.0.0 to listen on any. --port 9090 Which port web server should listen for requests on. --config configs/models.yaml Configuration file for models and their weights. --iterations -n 1 How many images to generate per prompt. --grid -g False Save all image series as a grid rather than individually. --sampler -A k_lms Sampler to use. Use -h to get list of available samplers. --seamless False Create interesting effects by tiling elements of the image. --embedding_path None Path to pre-trained embedding manager checkpoints, for custom models --gfpgan_dir src/gfpgan Path to where GFPGAN is installed. --gfpgan_model_path experiments/pretrained_models /GFPGANv1.3.pth Path to GFPGAN model file, relative to --gfpgan_dir. --device -d torch.cuda.current_device() Device to run SD on, e.g. \"cuda:0\" These arguments are deprecated but still work: Argument Shortcut Default Description --weights None Pth to weights file; use --model stable-diffusion-1.4 instead --laion400m -l False Use older LAION400m weights; use --model=laion400m instead","title":"List of arguments recognized at the command line"},{"location":"features/CLI/#a-note-on-path-names","text":"On Windows systems, you may run into problems when passing the dream script standard backslashed path names because the Python interpreter treats \"\\\" as an escape. You can either double your slashes (ick): C:\\\\\\\\path\\\\\\\\to\\\\\\\\my\\\\\\\\file , or use Linux/Mac style forward slashes (better): C:/path/to/my/file .","title":"A note on path names:"},{"location":"features/CLI/#list-of-prompt-arguments","text":"After the dream.py script initializes, it will present you with a dream> prompt. Here you can enter information to generate images from text (txt2img), to embellish an existing image or sketch (img2img), or to selectively alter chosen regions of the image (inpainting).","title":"List of prompt arguments"},{"location":"features/CLI/#this-is-an-example-of-txt2img","text":"dream> \"waterfall and rainbow\" -W640 -H480 This will create the requested image with the dimensions 640 (width) and 480 (height). Those are the dream commands that apply to txt2img: Argument Shortcut Default Description \"my prompt\" Text prompt to use. The quotation marks are optional. --width -W 512 Width of generated image --height -H 512 Height of generated image --iterations -n 1 How many images to generate from this prompt --steps -s 50 How many steps of refinement to apply --cfg_scale -C 7.5 How hard to try to match the prompt to the generated image; any number greater than 0.0 works, but the useful range is roughly 5.0 to 20.0 --seed -S None Set the random seed for the next series of images. This can be used to recreate an image generated previously. --sampler -A k_lms Sampler to use. Use -h to get list of available samplers. --grid -g False Turn on grid mode to return a single image combining all the images generated by this prompt --individual -i True Turn off grid mode (deprecated; leave off --grid instead) --outdir -o outputs/img_samples Temporarily change the location of these images --seamless False Activate seamless tiling for interesting effects --log_tokenization -t False Display a color-coded list of the parsed tokens derived from the prompt --skip_normalization -x False Weighted subprompts will not be normalized. See Weighted Prompts --upscale -U -U 1 0.75 Upscale image by magnification factor (2, 4), and set strength of upscaling (0.0-1.0). If strength not set, will default to 0.75. --gfpgan_strength -G -G0 Fix faces using the GFPGAN algorithm; argument indicates how hard the algorithm should try (0.0-1.0) --save_original -save_orig False When upscaling or fixing faces, this will cause the original image to be saved rather than replaced. --variation -v 0.0 Add a bit of noise (0.0=none, 1.0=high) to the image in order to generate a series of variations. Usually used in combination with -S and -n to generate a series a riffs on a starting image. See Variations . --with_variations -V None Combine two or more variations. See Variations for now to use this. Note that the width and height of the image must be multiples of 64. You can provide different values, but they will be rounded down to the nearest multiple of 64.","title":"This is an example of txt2img"},{"location":"features/CLI/#this-is-an-example-of-img2img","text":"dream> waterfall and rainbow -I./vacation-photo.png -W640 -H480 --fit This will modify the indicated vacation photograph by making it more like the prompt. Results will vary greatly depending on what is in the image. We also ask to --fit the image into a box no bigger than 640x480. Otherwise the image size will be identical to the provided photo and you may run out of memory if it is large. In addition to the command-line options recognized by txt2img, img2img accepts additional options: Argument Shortcut Default Description --init_img -I None Path to the initialization image --fit -F False Scale the image to fit into the specified -H and -W dimensions --strength -s 0.75 How hard to try to match the prompt to the initial image. Ranges from 0.0-0.99, with higher values replacing the initial image completely.","title":"This is an example of img2img"},{"location":"features/CLI/#this-is-an-example-of-inpainting","text":"dream> \"waterfall and rainbow\" -I./vacation-photo.png -M./vacation-mask.png -W640 -H480 --fit This will do the same thing as img2img, but image alterations will only occur within transparent areas defined by the mask file specified by -M. You may also supply just a single initial image with the areas to overpaint made transparent, but you must be careful not to destroy the pixels underneath when you create the transparent areas. See Inpainting for details. inpainting accepts all the arguments used for txt2img and img2img, as well as the --mask (-M) argument: Argument Shortcut Default Description --init_mask -M None Path to an image the same size as the initial_image, with areas for inpainting made transparent.","title":"This is an example of inpainting"},{"location":"features/CLI/#command-line-editing-and-completion","text":"If you are on a Macintosh or Linux machine, the command-line offers convenient history tracking, editing, and command completion. To scroll through previous commands and potentially edit/reuse them, use the up and down cursor keys. To edit the current command, use the left and right cursor keys to position the cursor, and then backspace, delete or insert characters. To move to the very beginning of the command, type CTRL-A (or command-A on the Mac) To move to the end of the command, type CTRL-E. To cut a section of the command, position the cursor where you want to start cutting and type CTRL-K. To paste a cut section back in, position the cursor where you want to paste, and type CTRL-Y Windows users can get similar, but more limited, functionality if they launch dream.py with the \"winpty\" program: > winpty python scripts\\dream.py On the Mac and Linux platforms, when you exit dream.py, the last 1000 lines of your command-line history will be saved. When you restart dream.py, you can access the saved history using the up-arrow key. In addition, limited command-line completion is installed. In various contexts, you can start typing your command and press tab. A list of potential completions will be presented to you. You can then type a little more, hit tab again, and eventually autocomplete what you want. When specifying file paths using the one-letter shortcuts, the CLI will attempt to complete pathnames for you. This is most handy for the -I (init image) and -M (init mask) paths. To initiate completion, start the path with a slash (\"/\") or \"./\". For example: dream> zebra with a mustache -I./test-pictures<TAB> -I./test-pictures/Lincoln-and-Parrot.png -I./test-pictures/zebra.jpg -I./test-pictures/madonna.png -I./test-pictures/bad-sketch.png -I./test-pictures/man_with_eagle/ You can then type \"z\", hit tab again, and it will autofill to \"zebra.jpg\". More text completion features (such as autocompleting seeds) are on their way.","title":"Command-line editing and completion"},{"location":"features/EMBIGGEN/","text":"Embiggen -- upscale your images on limited memory machines # GFPGAN and Real-ESRGAN are both memory intensive. In order to avoid crashes and memory overloads during the Stable Diffusion process, these effects are applied after Stable Diffusion has completed its work. In single image generations, you will see the output right away but when you are using multiple iterations, the images will first be generated and then upscaled and face restored after that process is complete. While the image generation is taking place, you will still be able to preview the base images. If you wish to stop during the image generation but want to upscale or face restore a particular generated image, pass it again with the same prompt and generated seed along with the -U and -G prompt arguments to perform those actions. Embiggen # If you wanted to be able to do more (pixels) without running out of VRAM, or you want to upscale with details that couldn't possibly appear without the context of a prompt, this is the feature to try out. Embiggen automates the process of taking an init image, upscaling it, cutting it into smaller tiles that slightly overlap, running all the tiles through img2img to refine details with respect to the prompt, and \"stitching\" the tiles back together into a cohesive image. It automatically computes how many tiles are needed, and so it can be fed ANY size init image and perform Img2Img on it (though it will be run only one tile at a time, which can cause problems, see the Note at the end). If you're familiar with \"GoBig\" (ala progrock-stable ) it's similar to that, except it can work up to an arbitrarily large size (instead of just 2x), with tile overlaps configurable as a ratio, and has extra logic to re-run any number of the tile sub-sections of the image if for example a small part of a huge run got messed up. Usage -embiggen <scaling_factor> <esrgan_strength> <overlap_ratio OR overlap_pixels> Takes a scaling factor relative to the size of the --init_img ( -I ), followed by ESRGAN upscaling strength (0 - 1.0), followed by minimum amount of overlap between tiles as a decimal ratio (0 - 1.0) OR a number of pixels. The scaling factor is how much larger than the --init_img the output should be, and will multiply both x and y axis, so an image that is a scaling factor of 3.0 has 3*3= 9 times as many pixels, and will take (at least) 9 times as long (see overlap for why it might be longer). If the --init_img is already the right size -embiggen 1 , and it can also be less than one if the init_img is too big. Esrgan_strength defaults to 0.75, and the overlap_ratio defaults to 0.25, both are optional. Unlike Img2Img, the --width ( -W ) and --height ( -H ) arguments do not control the size of the image as a whole, but the size of the tiles used to Embiggen the image. ESRGAN is used to upscale the --init_img prior to cutting it into tiles/pieces to run through img2img and then stitch back together. Embiggen can be run without ESRGAN; just set the strength to zero (e.g. -embiggen 1.75 0 ). The output of Embiggen can also be upscaled after it's finished ( -U ). The overlap is the minimum that tiles will overlap with adjacent tiles, specified as either a ratio or a number of pixels. How much the tiles overlap determines the likelihood the tiling will be noticable, really small overlaps (e.g. a couple of pixels) may produce noticeable grid-like fuzzy distortions in the final stitched image. Though, as the overlapping space doesn't contribute to making the image bigger, and the larger the overlap the more tiles (and the more time) it will take to finish. Because the overlapping parts of tiles don't \"contribute\" to increasing size, every tile after the first in a row or column effectively only covers an extra 1 - overlap_ratio on each axis. If the input/ --init_img is same size as a tile, the ideal (for time) scaling factors with the default overlap (0.25) are 1.75, 2.5, 3.25, 4.0 etc.. -embiggen_tiles <spaced list of tiles> An advanced usage useful if you only want to alter parts of the image while running Embiggen. It takes a list of tiles by number to run and replace onto the initial image e.g. 1 3 5 . It's useful for either fixing problem spots from a previous Embiggen run, or selectively altering the prompt for sections of an image - for creative or coherency reasons. Tiles are numbered starting with one, and left-to-right, top-to-bottom. So, if you are generating a 3x3 tiled image, the middle row would be 4 5 6 . Example Usage Running Embiggen with 512x512 tiles on an existing image, scaling up by a factor of 2.5x; and doing the same again (default ESRGAN strength is 0.75, default overlap between tiles is 0.25): dream > a photo of a forest at sunset -s 100 -W 512 -H 512 -I outputs/forest.png -f 0.4 -embiggen 2.5 dream > a photo of a forest at sunset -s 100 -W 512 -H 512 -I outputs/forest.png -f 0.4 -embiggen 2.5 0.75 0.25 If your starting image was also 512x512 this should have taken 9 tiles. If there weren't enough clouds in the sky of that forest you just made (and that image is about 1280 pixels (512*2.5) wide A.K.A. three 512x512 tiles with 0.25 overlaps wide) we can replace that top row of tiles: dream> a photo of puffy clouds over a forest at sunset -s 100 -W 512 -H 512 -I outputs/000002.seed.png -f 0.5 -embiggen_tiles 1 2 3 Note Because the same prompt is used on all the tiled images, and the model doesn't have the context of anything outside the tile being run - it can end up creating repeated pattern (also called 'motifs') across all the tiles based on that prompt. The best way to combat this is lowering the --strength ( -f ) to stay more true to the init image, and increasing the number of steps so there is more compute-time to create the detail. Anecdotally --strength 0.35-0.45 works pretty well on most things. It may also work great in some examples even with the --strength set high for patterns, landscapes, or subjects that are more abstract. Because this is (relatively) fast, you can also always create a few Embiggen'ed images and manually composite them to preserve the best parts from each. Author: Travco","title":"**Embiggen -- upscale your images on limited memory machines**"},{"location":"features/EMBIGGEN/#embiggen-upscale-your-images-on-limited-memory-machines","text":"GFPGAN and Real-ESRGAN are both memory intensive. In order to avoid crashes and memory overloads during the Stable Diffusion process, these effects are applied after Stable Diffusion has completed its work. In single image generations, you will see the output right away but when you are using multiple iterations, the images will first be generated and then upscaled and face restored after that process is complete. While the image generation is taking place, you will still be able to preview the base images. If you wish to stop during the image generation but want to upscale or face restore a particular generated image, pass it again with the same prompt and generated seed along with the -U and -G prompt arguments to perform those actions.","title":"Embiggen -- upscale your images on limited memory machines"},{"location":"features/EMBIGGEN/#embiggen","text":"If you wanted to be able to do more (pixels) without running out of VRAM, or you want to upscale with details that couldn't possibly appear without the context of a prompt, this is the feature to try out. Embiggen automates the process of taking an init image, upscaling it, cutting it into smaller tiles that slightly overlap, running all the tiles through img2img to refine details with respect to the prompt, and \"stitching\" the tiles back together into a cohesive image. It automatically computes how many tiles are needed, and so it can be fed ANY size init image and perform Img2Img on it (though it will be run only one tile at a time, which can cause problems, see the Note at the end). If you're familiar with \"GoBig\" (ala progrock-stable ) it's similar to that, except it can work up to an arbitrarily large size (instead of just 2x), with tile overlaps configurable as a ratio, and has extra logic to re-run any number of the tile sub-sections of the image if for example a small part of a huge run got messed up. Usage -embiggen <scaling_factor> <esrgan_strength> <overlap_ratio OR overlap_pixels> Takes a scaling factor relative to the size of the --init_img ( -I ), followed by ESRGAN upscaling strength (0 - 1.0), followed by minimum amount of overlap between tiles as a decimal ratio (0 - 1.0) OR a number of pixels. The scaling factor is how much larger than the --init_img the output should be, and will multiply both x and y axis, so an image that is a scaling factor of 3.0 has 3*3= 9 times as many pixels, and will take (at least) 9 times as long (see overlap for why it might be longer). If the --init_img is already the right size -embiggen 1 , and it can also be less than one if the init_img is too big. Esrgan_strength defaults to 0.75, and the overlap_ratio defaults to 0.25, both are optional. Unlike Img2Img, the --width ( -W ) and --height ( -H ) arguments do not control the size of the image as a whole, but the size of the tiles used to Embiggen the image. ESRGAN is used to upscale the --init_img prior to cutting it into tiles/pieces to run through img2img and then stitch back together. Embiggen can be run without ESRGAN; just set the strength to zero (e.g. -embiggen 1.75 0 ). The output of Embiggen can also be upscaled after it's finished ( -U ). The overlap is the minimum that tiles will overlap with adjacent tiles, specified as either a ratio or a number of pixels. How much the tiles overlap determines the likelihood the tiling will be noticable, really small overlaps (e.g. a couple of pixels) may produce noticeable grid-like fuzzy distortions in the final stitched image. Though, as the overlapping space doesn't contribute to making the image bigger, and the larger the overlap the more tiles (and the more time) it will take to finish. Because the overlapping parts of tiles don't \"contribute\" to increasing size, every tile after the first in a row or column effectively only covers an extra 1 - overlap_ratio on each axis. If the input/ --init_img is same size as a tile, the ideal (for time) scaling factors with the default overlap (0.25) are 1.75, 2.5, 3.25, 4.0 etc.. -embiggen_tiles <spaced list of tiles> An advanced usage useful if you only want to alter parts of the image while running Embiggen. It takes a list of tiles by number to run and replace onto the initial image e.g. 1 3 5 . It's useful for either fixing problem spots from a previous Embiggen run, or selectively altering the prompt for sections of an image - for creative or coherency reasons. Tiles are numbered starting with one, and left-to-right, top-to-bottom. So, if you are generating a 3x3 tiled image, the middle row would be 4 5 6 . Example Usage Running Embiggen with 512x512 tiles on an existing image, scaling up by a factor of 2.5x; and doing the same again (default ESRGAN strength is 0.75, default overlap between tiles is 0.25): dream > a photo of a forest at sunset -s 100 -W 512 -H 512 -I outputs/forest.png -f 0.4 -embiggen 2.5 dream > a photo of a forest at sunset -s 100 -W 512 -H 512 -I outputs/forest.png -f 0.4 -embiggen 2.5 0.75 0.25 If your starting image was also 512x512 this should have taken 9 tiles. If there weren't enough clouds in the sky of that forest you just made (and that image is about 1280 pixels (512*2.5) wide A.K.A. three 512x512 tiles with 0.25 overlaps wide) we can replace that top row of tiles: dream> a photo of puffy clouds over a forest at sunset -s 100 -W 512 -H 512 -I outputs/000002.seed.png -f 0.5 -embiggen_tiles 1 2 3 Note Because the same prompt is used on all the tiled images, and the model doesn't have the context of anything outside the tile being run - it can end up creating repeated pattern (also called 'motifs') across all the tiles based on that prompt. The best way to combat this is lowering the --strength ( -f ) to stay more true to the init image, and increasing the number of steps so there is more compute-time to create the detail. Anecdotally --strength 0.35-0.45 works pretty well on most things. It may also work great in some examples even with the --strength set high for patterns, landscapes, or subjects that are more abstract. Because this is (relatively) fast, you can also always create a few Embiggen'ed images and manually composite them to preserve the best parts from each. Author: Travco","title":"Embiggen"},{"location":"features/IMG2IMG/","text":"IMG2IMG # This script also provides an img2img feature that lets you seed your creations with an initial drawing or photo. This is a really cool feature that tells stable diffusion to build the prompt on top of the image you provide, preserving the original's basic shape and layout. To use it, provide the --init_img option as shown here: dream> \"waterfall and rainbow\" --init_img = ./init-images/crude_drawing.png --strength = 0 .5 -s100 -n4 The --init_img (-I) option gives the path to the seed picture. --strength (-f) controls how much the original will be modified, ranging from 0.0 (keep the original intact), to 1.0 (ignore the original completely). The default is 0.75 , and ranges from 0.25-0.75 give interesting results. You may also pass a -v<variation_amount> option to generate -n<iterations> count variants on the original image. This is done by passing the first generated image back into img2img the requested number of times. It generates interesting variants. If the initial image contains transparent regions, then Stable Diffusion will only draw within the transparent regions, a process called \"inpainting\". However, for this to work correctly, the color information underneath the transparent needs to be preserved, not erased. More Details can be found here: Creating Transparent Images For Inpainting","title":"Image-to-Image"},{"location":"features/IMG2IMG/#img2img","text":"This script also provides an img2img feature that lets you seed your creations with an initial drawing or photo. This is a really cool feature that tells stable diffusion to build the prompt on top of the image you provide, preserving the original's basic shape and layout. To use it, provide the --init_img option as shown here: dream> \"waterfall and rainbow\" --init_img = ./init-images/crude_drawing.png --strength = 0 .5 -s100 -n4 The --init_img (-I) option gives the path to the seed picture. --strength (-f) controls how much the original will be modified, ranging from 0.0 (keep the original intact), to 1.0 (ignore the original completely). The default is 0.75 , and ranges from 0.25-0.75 give interesting results. You may also pass a -v<variation_amount> option to generate -n<iterations> count variants on the original image. This is done by passing the first generated image back into img2img the requested number of times. It generates interesting variants. If the initial image contains transparent regions, then Stable Diffusion will only draw within the transparent regions, a process called \"inpainting\". However, for this to work correctly, the color information underneath the transparent needs to be preserved, not erased. More Details can be found here: Creating Transparent Images For Inpainting","title":"IMG2IMG"},{"location":"features/INPAINTING/","text":"Creating Transparent Regions for Inpainting # Inpainting is really cool. To do it, you start with an initial image and use a photoeditor to make one or more regions transparent (i.e. they have a \"hole\" in them). You then provide the path to this image at the dream> command line using the -I switch. Stable Diffusion will only paint within the transparent region. There's a catch. In the current implementation, you have to prepare the initial image correctly so that the underlying colors are preserved under the transparent area. Many imaging editing applications will by default erase the color information under the transparent pixels and replace them with white or black, which will lead to suboptimal inpainting. You also must take care to export the PNG file in such a way that the color information is preserved. If your photoeditor is erasing the underlying color information, dream.py will give you a big fat warning. If you can't find a way to coax your photoeditor to retain color values under transparent areas, then you can combine the -I and -M switches to provide both the original unedited image and the masked (partially transparent) image: dream> \"man with cat on shoulder\" -I./images/man.png -M./images/man-transparent.png We are hoping to get rid of the need for this workaround in an upcoming release. Recipe for GIMP # GIMP is a popular Linux photoediting tool. Open image in GIMP. Layer->Transparency->Add Alpha Channel Use lasoo tool to select region to mask Choose Select -> Float to create a floating selection Open the Layers toolbar (^L) and select \"Floating Selection\" Set opacity to 0% Export as PNG In the export dialogue, Make sure the \"Save colour values from transparent pixels\" checkbox is selected.","title":"Inpainting"},{"location":"features/INPAINTING/#creating-transparent-regions-for-inpainting","text":"Inpainting is really cool. To do it, you start with an initial image and use a photoeditor to make one or more regions transparent (i.e. they have a \"hole\" in them). You then provide the path to this image at the dream> command line using the -I switch. Stable Diffusion will only paint within the transparent region. There's a catch. In the current implementation, you have to prepare the initial image correctly so that the underlying colors are preserved under the transparent area. Many imaging editing applications will by default erase the color information under the transparent pixels and replace them with white or black, which will lead to suboptimal inpainting. You also must take care to export the PNG file in such a way that the color information is preserved. If your photoeditor is erasing the underlying color information, dream.py will give you a big fat warning. If you can't find a way to coax your photoeditor to retain color values under transparent areas, then you can combine the -I and -M switches to provide both the original unedited image and the masked (partially transparent) image: dream> \"man with cat on shoulder\" -I./images/man.png -M./images/man-transparent.png We are hoping to get rid of the need for this workaround in an upcoming release.","title":"Creating Transparent Regions for Inpainting"},{"location":"features/INPAINTING/#recipe-for-gimp","text":"GIMP is a popular Linux photoediting tool. Open image in GIMP. Layer->Transparency->Add Alpha Channel Use lasoo tool to select region to mask Choose Select -> Float to create a floating selection Open the Layers toolbar (^L) and select \"Floating Selection\" Set opacity to 0% Export as PNG In the export dialogue, Make sure the \"Save colour values from transparent pixels\" checkbox is selected.","title":"Recipe for GIMP"},{"location":"features/OTHER/","text":"Google Colab # Stable Diffusion AI Notebook: Open and follow instructions to use an isolated environment running Dream. Output Example: Seamless Tiling # The seamless tiling mode causes generated images to seamlessly tile with itself. To use it, add the --seamless option when starting the script which will result in all generated images to tile, or for each dream> prompt as shown here: dream > \"pond garden with lotus by claude monet\" -- seamless - s100 - n4 Reading Prompts from a File # You can automate dream.py by providing a text file with the prompts you want to run, one line per prompt. The text file must be composed with a text editor (e.g. Notepad) and not a word processor. Each line should look like what you would type at the dream> prompt: a beautiful sunny day in the park, children playing -n4 -C10 stormy weather on a mountain top, goats grazing -s100 innovative packaging for a squid ' s dinner -S137038382 Then pass this file's name to dream.py when you invoke it: ( ldm ) ~/stable-diffusion$ python3 scripts/dream.py --from_file \"path/to/prompts.txt\" You may read a series of prompts from standard input by providing a filename of - : ( ldm ) ~/stable-diffusion$ echo \"a beautiful day\" | python3 scripts/dream.py --from_file - Shortcuts: Reusing Seeds # Since it is so common to reuse seeds while refining a prompt, there is now a shortcut as of version 1.11. Provide a **-S** (or **--seed** ) switch of -1 to use the seed of the most recent image generated. If you produced multiple images with the **-n** switch, then you can go back further using -2, -3, etc. up to the first image generated by the previous command. Sorry, but you can't go back further than one command. Here's an example of using this to do a quick refinement. It also illustrates using the new **-G** switch to turn on upscaling and face enhancement (see previous section): dream> a cute child playing hopscotch -G0.5 [ ... ] outputs/img-samples/000039.3498014304.png: \"a cute child playing hopscotch\" -s50 -W512 -H512 -C7.5 -mk_lms -S3498014304 # I wonder what it will look like if I bump up the steps and set facial enhancement to full strength? dream> a cute child playing hopscotch -G1.0 -s100 -S -1 reusing previous seed 3498014304 [ ... ] outputs/img-samples/000040.3498014304.png: \"a cute child playing hopscotch\" -G1.0 -s100 -W512 -H512 -C7.5 -mk_lms -S3498014304 Weighted Prompts # You may weight different sections of the prompt to tell the sampler to attach different levels of priority to them, by adding :(number) to the end of the section you wish to up- or downweight. For example consider this prompt: tabby cat:0.25 white duck:0.75 hybrid This will tell the sampler to invest 25% of its effort on the tabby cat aspect of the image and 75% on the white duck aspect (surprisingly, this example actually works). The prompt weights can use any combination of integers and floating point numbers, and they do not need to add up to 1. Simplified API # For programmers who wish to incorporate stable-diffusion into other products, this repository includes a simplified API for text to image generation, which lets you create images from a prompt in just three lines of code: from ldm.generate import Generate g = Generate () outputs = g.txt2img ( \"a unicorn in manhattan\" ) Outputs is a list of lists in the format [filename1,seed1],[filename2,seed2]...]. Please see ldm/generate.py for more information. A set of example scripts is coming RSN. Preload Models # In situations where you have limited internet connectivity or are blocked behind a firewall, you can use the preload script to preload the required files for Stable Diffusion to run. The preload script scripts/preload_models.py needs to be run once at least while connected to the internet. In the following runs, it will load up the cached versions of the required files from the .cache directory of the system. ( ldm ) ~/stable-diffusion$ python3 ./scripts/preload_models.py preloading bert tokenizer... Downloading: 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 28 .0/28.0 [ 00 :00< 00 :00, 49 .3kB/s ] Downloading: 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 226k/226k [ 00 :00< 00 :00, 2 .79MB/s ] Downloading: 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 455k/455k [ 00 :00< 00 :00, 4 .36MB/s ] Downloading: 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 570 /570 [ 00 :00< 00 :00, 477kB/s ] ...success preloading kornia requirements... Downloading: \"https://github.com/DagnyT/hardnet/raw/master/pretrained/train_liberty_with_aug/checkpoint_liberty_with_aug.pth\" to /u/lstein/.cache/torch/hub/checkpoints/checkpoint_liberty_with_aug.pth 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 5 .10M/5.10M [ 00 :00< 00 :00, 101MB/s ] ...success","title":"Others"},{"location":"features/OTHER/#google-colab","text":"Stable Diffusion AI Notebook: Open and follow instructions to use an isolated environment running Dream. Output Example:","title":"Google Colab"},{"location":"features/OTHER/#seamless-tiling","text":"The seamless tiling mode causes generated images to seamlessly tile with itself. To use it, add the --seamless option when starting the script which will result in all generated images to tile, or for each dream> prompt as shown here: dream > \"pond garden with lotus by claude monet\" -- seamless - s100 - n4","title":"Seamless Tiling"},{"location":"features/OTHER/#reading-prompts-from-a-file","text":"You can automate dream.py by providing a text file with the prompts you want to run, one line per prompt. The text file must be composed with a text editor (e.g. Notepad) and not a word processor. Each line should look like what you would type at the dream> prompt: a beautiful sunny day in the park, children playing -n4 -C10 stormy weather on a mountain top, goats grazing -s100 innovative packaging for a squid ' s dinner -S137038382 Then pass this file's name to dream.py when you invoke it: ( ldm ) ~/stable-diffusion$ python3 scripts/dream.py --from_file \"path/to/prompts.txt\" You may read a series of prompts from standard input by providing a filename of - : ( ldm ) ~/stable-diffusion$ echo \"a beautiful day\" | python3 scripts/dream.py --from_file -","title":"Reading Prompts from a File"},{"location":"features/OTHER/#shortcuts-reusing-seeds","text":"Since it is so common to reuse seeds while refining a prompt, there is now a shortcut as of version 1.11. Provide a **-S** (or **--seed** ) switch of -1 to use the seed of the most recent image generated. If you produced multiple images with the **-n** switch, then you can go back further using -2, -3, etc. up to the first image generated by the previous command. Sorry, but you can't go back further than one command. Here's an example of using this to do a quick refinement. It also illustrates using the new **-G** switch to turn on upscaling and face enhancement (see previous section): dream> a cute child playing hopscotch -G0.5 [ ... ] outputs/img-samples/000039.3498014304.png: \"a cute child playing hopscotch\" -s50 -W512 -H512 -C7.5 -mk_lms -S3498014304 # I wonder what it will look like if I bump up the steps and set facial enhancement to full strength? dream> a cute child playing hopscotch -G1.0 -s100 -S -1 reusing previous seed 3498014304 [ ... ] outputs/img-samples/000040.3498014304.png: \"a cute child playing hopscotch\" -G1.0 -s100 -W512 -H512 -C7.5 -mk_lms -S3498014304","title":"Shortcuts: Reusing Seeds"},{"location":"features/OTHER/#weighted-prompts","text":"You may weight different sections of the prompt to tell the sampler to attach different levels of priority to them, by adding :(number) to the end of the section you wish to up- or downweight. For example consider this prompt: tabby cat:0.25 white duck:0.75 hybrid This will tell the sampler to invest 25% of its effort on the tabby cat aspect of the image and 75% on the white duck aspect (surprisingly, this example actually works). The prompt weights can use any combination of integers and floating point numbers, and they do not need to add up to 1.","title":"Weighted Prompts"},{"location":"features/OTHER/#simplified-api","text":"For programmers who wish to incorporate stable-diffusion into other products, this repository includes a simplified API for text to image generation, which lets you create images from a prompt in just three lines of code: from ldm.generate import Generate g = Generate () outputs = g.txt2img ( \"a unicorn in manhattan\" ) Outputs is a list of lists in the format [filename1,seed1],[filename2,seed2]...]. Please see ldm/generate.py for more information. A set of example scripts is coming RSN.","title":"Simplified API"},{"location":"features/OTHER/#preload-models","text":"In situations where you have limited internet connectivity or are blocked behind a firewall, you can use the preload script to preload the required files for Stable Diffusion to run. The preload script scripts/preload_models.py needs to be run once at least while connected to the internet. In the following runs, it will load up the cached versions of the required files from the .cache directory of the system. ( ldm ) ~/stable-diffusion$ python3 ./scripts/preload_models.py preloading bert tokenizer... Downloading: 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 28 .0/28.0 [ 00 :00< 00 :00, 49 .3kB/s ] Downloading: 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 226k/226k [ 00 :00< 00 :00, 2 .79MB/s ] Downloading: 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 455k/455k [ 00 :00< 00 :00, 4 .36MB/s ] Downloading: 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 570 /570 [ 00 :00< 00 :00, 477kB/s ] ...success preloading kornia requirements... Downloading: \"https://github.com/DagnyT/hardnet/raw/master/pretrained/train_liberty_with_aug/checkpoint_liberty_with_aug.pth\" to /u/lstein/.cache/torch/hub/checkpoints/checkpoint_liberty_with_aug.pth 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 5 .10M/5.10M [ 00 :00< 00 :00, 101MB/s ] ...success","title":"Preload Models"},{"location":"features/TEXTUAL_INVERSION/","text":"Personalizing Text-to-Image Generation # You may personalize the generated images to provide your own styles or objects by training a new LDM checkpoint and introducing a new vocabulary to the fixed model as a (.pt) embeddings file. Alternatively, you may use or train HuggingFace Concepts embeddings files (.bin) from https://huggingface.co/sd-concepts-library and its associated notebooks. Training # To train, prepare a folder that contains images sized at 512x512 and execute the following: WINDOWS # As the default backend is not available on Windows, if you're using that platform, set the environment variable PL_TORCH_DISTRIBUTED_BACKEND to gloo python3 ./main.py --base ./configs/stable-diffusion/v1-finetune.yaml \\ --actual_resume ./models/ldm/stable-diffusion-v1/model.ckpt \\ -t \\ -n my_cat \\ --gpus 0 \\ --data_root D:/textual-inversion/my_cat \\ --init_word 'cat' During the training process, files will be created in /logs/[project][time][project]/ where you can see the process. Conditioning contains the training prompts inputs, reconstruction the input images for the training epoch samples, samples scaled for a sample of the prompt and one with the init word provided. On a RTX3090, the process for SD will take ~1h @1 .6 iterations/sec. Info According to the associated paper, the optimal number of images is 3-5. Your model may not converge if you use more images than that. Training will run indefinitely, but you may wish to stop it (with ctrl-c) before the heat death of the universe, when you find a low loss epoch or around ~5000 iterations. Note that you can set a fixed limit on the number of training steps by decreasing the \"max_steps\" option in configs/stable_diffusion/v1-finetune.yaml (currently set to 4000000) Run the Model # Once the model is trained, specify the trained .pt or .bin file when starting dream using python3 ./scripts/dream.py \\ --embedding_path /path/to/embedding.pt \\ --full_precision Then, to utilize your subject at the dream prompt dream> \"a photo of *\" This also works with image2image dream> \"waterfall and rainbow in the style of *\" --init_img = ./init-images/crude_drawing.png --strength = 0 .5 -s100 -n4 For .pt files it's also possible to train multiple tokens (modify the placeholder string in configs/stable-diffusion/v1-finetune.yaml ) and combine LDM checkpoints using: python3 ./scripts/merge_embeddings.py \\ --manager_ckpts /path/to/first/embedding.pt \\ [ </path/to/second/embedding.pt>, [ ... ]] \\ --output_path /path/to/output/embedding.pt Credit goes to rinongal and the repository Please see the repository and associated paper for details and limitations.","title":"TEXTUAL_INVERSION"},{"location":"features/TEXTUAL_INVERSION/#personalizing-text-to-image-generation","text":"You may personalize the generated images to provide your own styles or objects by training a new LDM checkpoint and introducing a new vocabulary to the fixed model as a (.pt) embeddings file. Alternatively, you may use or train HuggingFace Concepts embeddings files (.bin) from https://huggingface.co/sd-concepts-library and its associated notebooks.","title":"Personalizing Text-to-Image Generation"},{"location":"features/TEXTUAL_INVERSION/#training","text":"To train, prepare a folder that contains images sized at 512x512 and execute the following:","title":"Training"},{"location":"features/TEXTUAL_INVERSION/#windows","text":"As the default backend is not available on Windows, if you're using that platform, set the environment variable PL_TORCH_DISTRIBUTED_BACKEND to gloo python3 ./main.py --base ./configs/stable-diffusion/v1-finetune.yaml \\ --actual_resume ./models/ldm/stable-diffusion-v1/model.ckpt \\ -t \\ -n my_cat \\ --gpus 0 \\ --data_root D:/textual-inversion/my_cat \\ --init_word 'cat' During the training process, files will be created in /logs/[project][time][project]/ where you can see the process. Conditioning contains the training prompts inputs, reconstruction the input images for the training epoch samples, samples scaled for a sample of the prompt and one with the init word provided. On a RTX3090, the process for SD will take ~1h @1 .6 iterations/sec. Info According to the associated paper, the optimal number of images is 3-5. Your model may not converge if you use more images than that. Training will run indefinitely, but you may wish to stop it (with ctrl-c) before the heat death of the universe, when you find a low loss epoch or around ~5000 iterations. Note that you can set a fixed limit on the number of training steps by decreasing the \"max_steps\" option in configs/stable_diffusion/v1-finetune.yaml (currently set to 4000000)","title":"WINDOWS"},{"location":"features/TEXTUAL_INVERSION/#run-the-model","text":"Once the model is trained, specify the trained .pt or .bin file when starting dream using python3 ./scripts/dream.py \\ --embedding_path /path/to/embedding.pt \\ --full_precision Then, to utilize your subject at the dream prompt dream> \"a photo of *\" This also works with image2image dream> \"waterfall and rainbow in the style of *\" --init_img = ./init-images/crude_drawing.png --strength = 0 .5 -s100 -n4 For .pt files it's also possible to train multiple tokens (modify the placeholder string in configs/stable-diffusion/v1-finetune.yaml ) and combine LDM checkpoints using: python3 ./scripts/merge_embeddings.py \\ --manager_ckpts /path/to/first/embedding.pt \\ [ </path/to/second/embedding.pt>, [ ... ]] \\ --output_path /path/to/output/embedding.pt Credit goes to rinongal and the repository Please see the repository and associated paper for details and limitations.","title":"Run the Model"},{"location":"features/UPSCALE/","text":"GFPGAN and Real-ESRGAN Support # The script also provides the ability to do face restoration and upscaling with the help of GFPGAN and Real-ESRGAN respectively. As of version 1.14, environment.yaml will install the Real-ESRGAN package into the standard install location for python packages, and will put GFPGAN into a subdirectory of \"src\" in the stable-diffusion directory. (The reason for this is that the standard GFPGAN distribution has a minor bug that adversely affects image color.) Upscaling with Real-ESRGAN should \"just work\" without further intervention. Simply pass the --upscale (-U) option on the dream> command line, or indicate the desired scale on the popup in the Web GUI. For GFPGAN to work, there is one additional step needed. You will need to download and copy the GFPGAN models file into src/gfpgan/experiments/pretrained_models . On Mac and Linux systems, here's how you'd do it using wget : > wget https://github.com/TencentARC/GFPGAN/releases/download/v1.3.0/GFPGANv1.3.pth src/gfpgan/experiments/pretrained_models/ Make sure that you're in the stable-diffusion directory when you do this. Alternatively, if you have GFPGAN installed elsewhere, or if you are using an earlier version of this package which asked you to install GFPGAN in a sibling directory, you may use the --gfpgan_dir argument with dream.py to set a custom path to your GFPGAN directory. There are other GFPGAN related boot arguments if you wish to customize further. Note: Internet connection needed: Users whose GPU machines are isolated from the Internet (e.g. on a University cluster) should be aware that the first time you run dream.py with GFPGAN and Real-ESRGAN turned on, it will try to download model files from the Internet. To rectify this, you may run python3 scripts/preload_models.py after you have installed GFPGAN and all its dependencies. Usage # You will now have access to two new prompt arguments. Upscaling # -U : <upscaling_factor> <upscaling_strength> The upscaling prompt argument takes two values. The first value is a scaling factor and should be set to either 2 or 4 only. This will either scale the image 2x or 4x respectively using different models. You can set the scaling stength between 0 and 1.0 to control intensity of the of the scaling. This is handy because AI upscalers generally tend to smooth out texture details. If you wish to retain some of those for natural looking results, we recommend using values between 0.5 to 0.8 . If you do not explicitly specify an upscaling_strength, it will default to 0.75. Face Restoration # -G : <gfpgan_strength> This prompt argument controls the strength of the face restoration that is being applied. Similar to upscaling, values between 0.5 to 0.8 are recommended. You can use either one or both without any conflicts. In cases where you use both, the image will be first upscaled and then the face restoration process will be executed to ensure you get the highest quality facial features. --save_orig When you use either -U or -G , the final result you get is upscaled or face modified. If you want to save the original Stable Diffusion generation, you can use the -save_orig prompt argument to save the original unaffected version too. Example Usage # dream> superman dancing with a panda bear -U 2 0 .6 -G 0 .4 This also works with img2img: dream> a man wearing a pineapple hat -I path/to/your/file.png -U 2 0 .5 -G 0 .6 Note # GFPGAN and Real-ESRGAN are both memory intensive. In order to avoid crashes and memory overloads during the Stable Diffusion process, these effects are applied after Stable Diffusion has completed its work. In single image generations, you will see the output right away but when you are using multiple iterations, the images will first be generated and then upscaled and face restored after that process is complete. While the image generation is taking place, you will still be able to preview the base images. If you wish to stop during the image generation but want to upscale or face restore a particular generated image, pass it again with the same prompt and generated seed along with the -U and -G prompt arguments to perform those actions.","title":"Upscale"},{"location":"features/UPSCALE/#gfpgan-and-real-esrgan-support","text":"The script also provides the ability to do face restoration and upscaling with the help of GFPGAN and Real-ESRGAN respectively. As of version 1.14, environment.yaml will install the Real-ESRGAN package into the standard install location for python packages, and will put GFPGAN into a subdirectory of \"src\" in the stable-diffusion directory. (The reason for this is that the standard GFPGAN distribution has a minor bug that adversely affects image color.) Upscaling with Real-ESRGAN should \"just work\" without further intervention. Simply pass the --upscale (-U) option on the dream> command line, or indicate the desired scale on the popup in the Web GUI. For GFPGAN to work, there is one additional step needed. You will need to download and copy the GFPGAN models file into src/gfpgan/experiments/pretrained_models . On Mac and Linux systems, here's how you'd do it using wget : > wget https://github.com/TencentARC/GFPGAN/releases/download/v1.3.0/GFPGANv1.3.pth src/gfpgan/experiments/pretrained_models/ Make sure that you're in the stable-diffusion directory when you do this. Alternatively, if you have GFPGAN installed elsewhere, or if you are using an earlier version of this package which asked you to install GFPGAN in a sibling directory, you may use the --gfpgan_dir argument with dream.py to set a custom path to your GFPGAN directory. There are other GFPGAN related boot arguments if you wish to customize further. Note: Internet connection needed: Users whose GPU machines are isolated from the Internet (e.g. on a University cluster) should be aware that the first time you run dream.py with GFPGAN and Real-ESRGAN turned on, it will try to download model files from the Internet. To rectify this, you may run python3 scripts/preload_models.py after you have installed GFPGAN and all its dependencies.","title":"GFPGAN and Real-ESRGAN Support"},{"location":"features/UPSCALE/#usage","text":"You will now have access to two new prompt arguments.","title":"Usage"},{"location":"features/UPSCALE/#upscaling","text":"-U : <upscaling_factor> <upscaling_strength> The upscaling prompt argument takes two values. The first value is a scaling factor and should be set to either 2 or 4 only. This will either scale the image 2x or 4x respectively using different models. You can set the scaling stength between 0 and 1.0 to control intensity of the of the scaling. This is handy because AI upscalers generally tend to smooth out texture details. If you wish to retain some of those for natural looking results, we recommend using values between 0.5 to 0.8 . If you do not explicitly specify an upscaling_strength, it will default to 0.75.","title":"Upscaling"},{"location":"features/UPSCALE/#face-restoration","text":"-G : <gfpgan_strength> This prompt argument controls the strength of the face restoration that is being applied. Similar to upscaling, values between 0.5 to 0.8 are recommended. You can use either one or both without any conflicts. In cases where you use both, the image will be first upscaled and then the face restoration process will be executed to ensure you get the highest quality facial features. --save_orig When you use either -U or -G , the final result you get is upscaled or face modified. If you want to save the original Stable Diffusion generation, you can use the -save_orig prompt argument to save the original unaffected version too.","title":"Face Restoration"},{"location":"features/UPSCALE/#example-usage","text":"dream> superman dancing with a panda bear -U 2 0 .6 -G 0 .4 This also works with img2img: dream> a man wearing a pineapple hat -I path/to/your/file.png -U 2 0 .5 -G 0 .6","title":"Example Usage"},{"location":"features/UPSCALE/#note","text":"GFPGAN and Real-ESRGAN are both memory intensive. In order to avoid crashes and memory overloads during the Stable Diffusion process, these effects are applied after Stable Diffusion has completed its work. In single image generations, you will see the output right away but when you are using multiple iterations, the images will first be generated and then upscaled and face restored after that process is complete. While the image generation is taking place, you will still be able to preview the base images. If you wish to stop during the image generation but want to upscale or face restore a particular generated image, pass it again with the same prompt and generated seed along with the -U and -G prompt arguments to perform those actions.","title":"Note"},{"location":"features/VARIATIONS/","text":"Release 1.13 of SD-Dream adds support for image variations. You are able to do the following: Generate a series of systematic variations of an image, given a prompt. The amount of variation from one image to the next can be controlled. Given two or more variations that you like, you can combine them in a weighted fashion. This cheat sheet provides a quick guide for how this works in practice, using variations to create the desired image of Xena, Warrior Princess. Step 1 -- Find a base image that you like # The prompt we will use throughout is lucy lawless as xena, warrior princess, character portrait, high resolution. This will be indicated as prompt in the examples below. First we let SD create a series of images in the usual way, in this case requesting six iterations: dream> lucy lawless as xena, warrior princess, character portrait, high resolution -n6 ... Outputs: ./outputs/Xena/000001.1579445059.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S1579445059 ./outputs/Xena/000001.1880768722.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S1880768722 ./outputs/Xena/000001.332057179.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S332057179 ./outputs/Xena/000001.2224800325.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S2224800325 ./outputs/Xena/000001.465250761.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S465250761 ./outputs/Xena/000001.3357757885.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S3357757885 The one with seed 3357757885 looks nice: Step 2 - Generating Variations # Let's try to generate some variations. Using the same seed, we pass the argument -v0.1 (or --variant_amount), which generates a series of variations each differing by a variation amount of 0.2. This number ranges from 0 to 1.0 , with higher numbers being larger amounts of variation. dream> \"prompt\" -n6 -S3357757885 -v0.2 ... Outputs: ./outputs/Xena/000002.784039624.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 784039624 :0.2 -S3357757885 ./outputs/Xena/000002.3647897225.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225 :0.2 -S3357757885 ./outputs/Xena/000002.917731034.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 917731034 :0.2 -S3357757885 ./outputs/Xena/000002.4116285959.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 4116285959 :0.2 -S3357757885 ./outputs/Xena/000002.1614299449.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 1614299449 :0.2 -S3357757885 ./outputs/Xena/000002.1335553075.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 1335553075 :0.2 -S3357757885 Variation Sub Seeding # Note that the output for each image has a -V option giving the \"variant subseed\" for that image, consisting of a seed followed by the variation amount used to generate it. This gives us a series of closely-related variations, including the two shown here. I like the expression on Xena's face in the first one (subseed 3647897225), and the armor on her shoulder in the second one (subseed 1614299449). Can we combine them to get the best of both worlds? We combine the two variations using -V (--with_variations). Again, we must provide the seed for the originally-chosen image in order for this to work. dream> \"prompt\" -S3357757885 -V3647897225,0.1,1614299449,0.1 Outputs: ./outputs/Xena/000003.1614299449.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225 :0.1,1614299449:0.1 -S3357757885 Here we are providing equal weights (0.1 and 0.1) for both the subseeds. The resulting image is close, but not exactly what I wanted: We could either try combining the images with different weights, or we can generate more variations around the almost-but-not-quite image. We do the latter, using both the -V (combining) and -v (variation strength) options. Note that we use -n6 to generate 6 variations: dream> \"prompt\" -S3357757885 -V3647897225,0.1,1614299449,0.1 -v0.05 -n6 Outputs: ./outputs/Xena/000004.3279757577.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,3279757577:0.05 -S3357757885 ./outputs/Xena/000004.2853129515.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,2853129515:0.05 -S3357757885 ./outputs/Xena/000004.3747154981.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,3747154981:0.05 -S3357757885 ./outputs/Xena/000004.2664260391.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,2664260391:0.05 -S3357757885 ./outputs/Xena/000004.1642517170.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,1642517170:0.05 -S3357757885 ./outputs/Xena/000004.2183375608.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,2183375608:0.05 -S3357757885 ``` This produces six images, all slight variations on the combination of the chosen two images. Here's the one I like best: As you can see, this is a very powerful tool, which when combined with subprompt weighting, gives you great control over the content and quality of your generated images.","title":"Variations"},{"location":"features/VARIATIONS/#step-1-find-a-base-image-that-you-like","text":"The prompt we will use throughout is lucy lawless as xena, warrior princess, character portrait, high resolution. This will be indicated as prompt in the examples below. First we let SD create a series of images in the usual way, in this case requesting six iterations: dream> lucy lawless as xena, warrior princess, character portrait, high resolution -n6 ... Outputs: ./outputs/Xena/000001.1579445059.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S1579445059 ./outputs/Xena/000001.1880768722.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S1880768722 ./outputs/Xena/000001.332057179.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S332057179 ./outputs/Xena/000001.2224800325.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S2224800325 ./outputs/Xena/000001.465250761.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S465250761 ./outputs/Xena/000001.3357757885.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S3357757885 The one with seed 3357757885 looks nice:","title":"Step 1 -- Find a base image that you like"},{"location":"features/VARIATIONS/#step-2-generating-variations","text":"Let's try to generate some variations. Using the same seed, we pass the argument -v0.1 (or --variant_amount), which generates a series of variations each differing by a variation amount of 0.2. This number ranges from 0 to 1.0 , with higher numbers being larger amounts of variation. dream> \"prompt\" -n6 -S3357757885 -v0.2 ... Outputs: ./outputs/Xena/000002.784039624.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 784039624 :0.2 -S3357757885 ./outputs/Xena/000002.3647897225.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225 :0.2 -S3357757885 ./outputs/Xena/000002.917731034.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 917731034 :0.2 -S3357757885 ./outputs/Xena/000002.4116285959.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 4116285959 :0.2 -S3357757885 ./outputs/Xena/000002.1614299449.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 1614299449 :0.2 -S3357757885 ./outputs/Xena/000002.1335553075.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 1335553075 :0.2 -S3357757885","title":"Step 2 - Generating Variations"},{"location":"features/VARIATIONS/#variation-sub-seeding","text":"Note that the output for each image has a -V option giving the \"variant subseed\" for that image, consisting of a seed followed by the variation amount used to generate it. This gives us a series of closely-related variations, including the two shown here. I like the expression on Xena's face in the first one (subseed 3647897225), and the armor on her shoulder in the second one (subseed 1614299449). Can we combine them to get the best of both worlds? We combine the two variations using -V (--with_variations). Again, we must provide the seed for the originally-chosen image in order for this to work. dream> \"prompt\" -S3357757885 -V3647897225,0.1,1614299449,0.1 Outputs: ./outputs/Xena/000003.1614299449.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225 :0.1,1614299449:0.1 -S3357757885 Here we are providing equal weights (0.1 and 0.1) for both the subseeds. The resulting image is close, but not exactly what I wanted: We could either try combining the images with different weights, or we can generate more variations around the almost-but-not-quite image. We do the latter, using both the -V (combining) and -v (variation strength) options. Note that we use -n6 to generate 6 variations: dream> \"prompt\" -S3357757885 -V3647897225,0.1,1614299449,0.1 -v0.05 -n6 Outputs: ./outputs/Xena/000004.3279757577.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,3279757577:0.05 -S3357757885 ./outputs/Xena/000004.2853129515.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,2853129515:0.05 -S3357757885 ./outputs/Xena/000004.3747154981.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,3747154981:0.05 -S3357757885 ./outputs/Xena/000004.2664260391.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,2664260391:0.05 -S3357757885 ./outputs/Xena/000004.1642517170.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,1642517170:0.05 -S3357757885 ./outputs/Xena/000004.2183375608.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,2183375608:0.05 -S3357757885 ``` This produces six images, all slight variations on the combination of the chosen two images. Here's the one I like best: As you can see, this is a very powerful tool, which when combined with subprompt weighting, gives you great control over the content and quality of your generated images.","title":"Variation Sub Seeding"},{"location":"features/WEB/","text":"As of version 1.10, this distribution comes with a bare bones web server (see screenshot). To use it, run the dream.py script by adding the **--web** option. ( ldm ) ~/stable-diffusion$ python3 scripts/dream.py --web You can then connect to the server by pointing your web browser at http://localhost:9090 , or to the network name or IP address of the server. Kudos to Tesseract Cat for contributing this code, and to dagf2101 for refining it.","title":"Barebones Web Server"},{"location":"help/TROUBLESHOOT/","text":"Frequently-Asked-Questions # Here are a few common installation problems and their solutions. Often these are caused by incomplete installations or crashes during the install process. QUESTION # During conda env create -f environment.yaml , conda hangs indefinitely. SOLUTION # Enter the stable-diffusion directory and completely remove the src directory and all its contents. The safest way to do this is to enter the stable-diffusion directory and give the command git clean -f . If this still doesn't fix the problem, try \"conda clean -all\" and then restart at the conda env create step. QUESTION # dream.py crashes with the complaint that it can't find ldm.simplet2i.py . Or it complains that function is being passed incorrect parameters. SOLUTION # Reinstall the stable diffusion modules. Enter the stable-diffusion directory and give the command pip install -e . QUESTION # dream.py dies, complaining of various missing modules, none of which starts with `ldm``. SOLUTION # From within the stable-diffusion directory, run conda env update -f environment.yaml This is also frequently the solution to complaints about an unknown function in a module. QUESTION # There's a feature or bugfix in the Stable Diffusion GitHub that you want to try out. SOLUTION # Main Branch # If the fix/feature is on the main branch, enter the stable-diffusion directory and do a git pull . Usually this will be sufficient, but if you start to see errors about missing or incorrect modules, use the command pip install -e . and/or conda env update -f environment.yaml (These commands won't break anything.) Sub Branch # If the feature/fix is on a branch (e.g. \" foo-bugfix \"), the recipe is similar, but do a git pull <name of branch> . Not Committed # If the feature/fix is in a pull request that has not yet been made part of the main branch or a feature/bugfix branch, then from the page for the desired pull request, look for the line at the top that reads \" xxxx wants to merge xx commits into lstein:main from YYYYYY \". Copy the URL in YYYY. It should have the format https://github.com/<name of contributor>/stable-diffusion/tree/<name of branch> Then go to the directory above stable-diffusion and rename the directory to \" stable-diffusion.lstein \", \" stable-diffusion.old \", or anything else. You can then git clone the branch that contains the pull request: git clone https://github.com/<name of contributor>/stable-diffusion/tree/<name of branch> You will need to go through the install procedure again, but it should be fast because all the dependencies are already loaded.","title":"F.A.Q."},{"location":"help/TROUBLESHOOT/#frequently-asked-questions","text":"Here are a few common installation problems and their solutions. Often these are caused by incomplete installations or crashes during the install process.","title":"Frequently-Asked-Questions"},{"location":"help/TROUBLESHOOT/#question","text":"During conda env create -f environment.yaml , conda hangs indefinitely.","title":"QUESTION"},{"location":"help/TROUBLESHOOT/#solution","text":"Enter the stable-diffusion directory and completely remove the src directory and all its contents. The safest way to do this is to enter the stable-diffusion directory and give the command git clean -f . If this still doesn't fix the problem, try \"conda clean -all\" and then restart at the conda env create step.","title":"SOLUTION"},{"location":"help/TROUBLESHOOT/#question_1","text":"dream.py crashes with the complaint that it can't find ldm.simplet2i.py . Or it complains that function is being passed incorrect parameters.","title":"QUESTION"},{"location":"help/TROUBLESHOOT/#solution_1","text":"Reinstall the stable diffusion modules. Enter the stable-diffusion directory and give the command pip install -e .","title":"SOLUTION"},{"location":"help/TROUBLESHOOT/#question_2","text":"dream.py dies, complaining of various missing modules, none of which starts with `ldm``.","title":"QUESTION"},{"location":"help/TROUBLESHOOT/#solution_2","text":"From within the stable-diffusion directory, run conda env update -f environment.yaml This is also frequently the solution to complaints about an unknown function in a module.","title":"SOLUTION"},{"location":"help/TROUBLESHOOT/#question_3","text":"There's a feature or bugfix in the Stable Diffusion GitHub that you want to try out.","title":"QUESTION"},{"location":"help/TROUBLESHOOT/#solution_3","text":"","title":"SOLUTION"},{"location":"help/TROUBLESHOOT/#main-branch","text":"If the fix/feature is on the main branch, enter the stable-diffusion directory and do a git pull . Usually this will be sufficient, but if you start to see errors about missing or incorrect modules, use the command pip install -e . and/or conda env update -f environment.yaml (These commands won't break anything.)","title":"Main Branch"},{"location":"help/TROUBLESHOOT/#sub-branch","text":"If the feature/fix is on a branch (e.g. \" foo-bugfix \"), the recipe is similar, but do a git pull <name of branch> .","title":"Sub Branch"},{"location":"help/TROUBLESHOOT/#not-committed","text":"If the feature/fix is in a pull request that has not yet been made part of the main branch or a feature/bugfix branch, then from the page for the desired pull request, look for the line at the top that reads \" xxxx wants to merge xx commits into lstein:main from YYYYYY \". Copy the URL in YYYY. It should have the format https://github.com/<name of contributor>/stable-diffusion/tree/<name of branch> Then go to the directory above stable-diffusion and rename the directory to \" stable-diffusion.lstein \", \" stable-diffusion.old \", or anything else. You can then git clone the branch that contains the pull request: git clone https://github.com/<name of contributor>/stable-diffusion/tree/<name of branch> You will need to go through the install procedure again, but it should be fast because all the dependencies are already loaded.","title":"Not Committed"},{"location":"installation/INSTALL_LINUX/","text":"You will need to install the following prerequisites if they are not already available. Use your operating system's preferred installer. Python (version 3.8.5 recommended; higher may work) git Install the Python Anaconda environment manager. ~$ wget https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh ~$ chmod +x Anaconda3-2022.05-Linux-x86_64.sh ~$ ./Anaconda3-2022.05-Linux-x86_64.sh After installing anaconda, you should log out of your system and log back in. If the installation worked, your command prompt will be prefixed by the name of the current anaconda environment - (base) . Copy the stable-diffusion source code from GitHub: ( base ) ~$ git clone https://github.com/lstein/stable-diffusion.git This will create stable-diffusion folder where you will follow the rest of the steps. Enter the newly-created stable-diffusion folder. From this step forward make sure that you are working in the stable-diffusion directory! ( base ) ~$ cd stable-diffusion ( base ) ~/stable-diffusion$ Use anaconda to copy necessary python packages, create a new python environment named ldm and activate the environment. ( base ) ~/stable-diffusion$ conda env create -f environment.yaml ( base ) ~/stable-diffusion$ conda activate ldm ( ldm ) ~/stable-diffusion$ After these steps, your command prompt will be prefixed by (ldm) as shown above. Load a couple of small machine-learning models required by stable diffusion: ( ldm ) ~/stable-diffusion$ python3 scripts/preload_models.py Note that this step is necessary because I modified the original just-in-time model loading scheme to allow the script to work on GPU machines that are not internet connected. See Preload Models Now you need to install the weights for the stable diffusion model. For running with the released weights, you will first need to set up an acount with Hugging Face . Use your credentials to log in, and then point your browser here You may be asked to sign a license agreement at this point. Click on \"Files and versions\" near the top of the page, and then click on the file named \"sd-v1-4.ckpt\". You'll be taken to a page that prompts you to click the \"download\" link. Save the file somewhere safe on your local machine. Now run the following commands from within the stable-diffusion directory. This will create a symbolic link from the stable-diffusion model.ckpt file, to the true location of the sd-v1-4.ckpt file. ( ldm ) ~/stable-diffusion$ mkdir -p models/ldm/stable-diffusion-v1 ( ldm ) ~/stable-diffusion$ ln -sf /path/to/sd-v1-4.ckpt models/ldm/stable-diffusion-v1/model.ckpt Start generating images! # for the pre-release weights use the -l or --liaon400m switch ( ldm ) ~/stable-diffusion$ python3 scripts/dream.py -l # for the post-release weights do not use the switch ( ldm ) ~/stable-diffusion$ python3 scripts/dream.py # for additional configuration switches and arguments, use -h or --help ( ldm ) ~/stable-diffusion$ python3 scripts/dream.py -h Subsequently, to relaunch the script, be sure to run \"conda activate ldm\" (step 5, second command), enter the stable-diffusion directory, and then launch the dream script (step 8). If you forget to activate the ldm environment, the script will fail with multiple ModuleNotFound errors. Updating to newer versions of the script # This distribution is changing rapidly. If you used the git clone method (step 5) to download the stable-diffusion directory, then to update to the latest and greatest version, launch the Anaconda window, enter stable-diffusion and type: ( ldm ) ~/stable-diffusion$ git pull This will bring your local copy into sync with the remote one.","title":"Linux"},{"location":"installation/INSTALL_LINUX/#updating-to-newer-versions-of-the-script","text":"This distribution is changing rapidly. If you used the git clone method (step 5) to download the stable-diffusion directory, then to update to the latest and greatest version, launch the Anaconda window, enter stable-diffusion and type: ( ldm ) ~/stable-diffusion$ git pull This will bring your local copy into sync with the remote one.","title":"Updating to newer versions of the script"},{"location":"installation/INSTALL_MAC/","text":"Requirements # macOS 12.3 Monterey or later Python Patience Apple Silicon or Intel Mac Things have moved really fast and so these instructions change often and are often out-of-date. One of the problems is that there are so many different ways to run this. We are trying to build a testing setup so that when we make changes it doesn't always break. How to (this hasn't been 100% tested yet): First get the weights checkpoint download started - it's big: Sign up at https://huggingface.co Go to the Stable diffusion diffusion model page Accept the terms and click Access Repository: Download sd-v1-4.ckpt (4.27 GB) and note where you have saved it (probably the Downloads folder) While that is downloading, open Terminal and run the following commands one at a time. # install brew (and Xcode command line tools): /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh ) \" # Now there are two different routes to get the Python (miniconda) environment up and running: # 1. Alongside pyenv # 2. No pyenv # # If you don't know what we are talking about, choose 2. # # NOW EITHER DO # 1. Installing alongside pyenv brew install pyenv-virtualenv # you might have this from before, no problem pyenv install anaconda3-2022.05 pyenv virtualenv anaconda3-2022.05 eval \" $( pyenv init - ) \" pyenv activate anaconda3-2022.05 # OR, # 2. Installing standalone # install python 3, git, cmake, protobuf: brew install cmake protobuf rust # install miniconda for M1 arm64: curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh -o Miniconda3-latest-MacOSX-arm64.sh /bin/bash Miniconda3-latest-MacOSX-arm64.sh # OR install miniconda for Intel: curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -o Miniconda3-latest-MacOSX-x86_64.sh /bin/bash Miniconda3-latest-MacOSX-x86_64.sh # EITHER WAY, # continue from here # clone the repo git clone https://github.com/lstein/stable-diffusion.git cd stable-diffusion # # wait until the checkpoint file has downloaded, then proceed # # create symlink to checkpoint mkdir -p models/ldm/stable-diffusion-v1/ PATH_TO_CKPT = \" $HOME /Downloads\" # or wherever you saved sd-v1-4.ckpt ln -s \" $PATH_TO_CKPT /sd-v1-4.ckpt\" models/ldm/stable-diffusion-v1/model.ckpt # install packages for arm64 PIP_EXISTS_ACTION = w CONDA_SUBDIR = osx-arm64 conda env create -f environment-mac.yaml conda activate ldm # OR install packages for x86_64 PIP_EXISTS_ACTION = w CONDA_SUBDIR = osx-x86_64 conda env create -f environment-mac.yaml conda activate ldm # only need to do this once python scripts/preload_models.py # run SD! python scripts/dream.py --full_precision # half-precision requires autocast and won't work # or run the web interface! python scripts/dream.py --web The original scripts should work as well. python scripts/orig_scripts/txt2img.py --prompt \"a photograph of an astronaut riding a horse\" --plms Note, export PIP_EXISTS_ACTION = w is a precaution to fix conda env create -f environment-mac.yaml never finishing in some situations. So it isn't required but wont hurt. After you follow all the instructions and run dream.py you might get several errors. Here's the errors I've seen and found solutions for. Is it slow? # Be sure to specify 1 sample and 1 iteration. python ./scripts/orig_scripts/txt2img.py \\ --prompt \"ocean\" \\ --ddim_steps 5 \\ --n_samples 1 \\ --n_iter 1 Doesn't work anymore? # PyTorch nightly includes support for MPS. Because of this, this setup is inherently unstable. One morning I woke up and it no longer worked no matter what I did until I switched to miniforge. However, I have another Mac that works just fine with Anaconda. If you can't get it to work, please search a little first because many of the errors will get posted and solved. If you can't find a solution please create an issue . One debugging step is to update to the latest version of PyTorch nightly. conda install pytorch torchvision torchaudio -c pytorch-nightly If it takes forever to run conda env create -f environment-mac.yaml you could try to run git clean -f followed by: conda clean --yes --all Or you could try to completley reset Anaconda: conda update --force-reinstall -y -n base -c defaults conda \"No module named cv2\", torch, 'ldm', 'transformers', 'taming', etc # There are several causes of these errors. First, did you remember to conda activate ldm ? If your terminal prompt begins with \"(ldm)\" then you activated it. If it begins with \"(base)\" or something else you haven't. Second, you might've run ./scripts/preload_models.py or ./scripts/dream.py instead of python ./scripts/preload_models.py or python ./scripts/dream.py . The cause of this error is long so it's below. Third, if it says you're missing taming you need to rebuild your virtual environment. ````bash conda deactivate conda env remove -n ldm PIP_EXISTS_ACTION=w CONDA_SUBDIR=osx-arm64 conda env create -f environment-mac.yaml ``` Fourth, If you have activated the ldm virtual environment and tried rebuilding it, maybe the problem could be that I have something installed that you don't and you'll just need to manually install it. Make sure you activate the virtual environment so it installs there instead of globally. conda activate ldm pip install _name_ You might also need to install Rust (I mention this again below). How many snakes are living in your computer? # You might have multiple Python installations on your system, in which case it's important to be explicit and consistent about which one to use for a given project. This is because virtual environments are coupled to the Python that created it (and all the associated 'system-level' modules). When you run python or python3 , your shell searches the colon-delimited locations in the PATH environment variable ( echo $PATH to see that list) in that order - first match wins. You can ask for the location of the first python3 found in your PATH with the which command like this: bash % which python3 /usr/bin/python3 Anything in /usr/bin is part of the OS . However, /usr/bin/python3 is not actually python3, but rather a stub that offers to install Xcode (which includes python 3). If you have Xcode installed already, /usr/bin/python3 will execute /Library/Developer/CommandLineTools/usr/bin/python3 or /Applications/Xcode.app/Contents/Developer/usr/bin/python3 (depending on which Xcode you've selected with xcode-select ). Note that /usr/bin/python is an entirely different python - specifically, python 2. Note: starting in macOS 12.3, /usr/bin/python no longer exists. bash % which python3 /opt/homebrew/bin/python3 If you installed python3 with Homebrew and you've modified your path to search for Homebrew binaries before system ones, you'll see the above path. bash % which python /opt/anaconda3/bin/python If you have Anaconda installed, you will see the above path. There is a /opt/anaconda3/bin/python3 also. We expect that /opt/anaconda3/bin/python and /opt/anaconda3/bin/python3 should actually be the same python , which you can verify by comparing the output of python3 -V and python -V . bash (ldm) % which python /Users/name/miniforge3/envs/ldm/bin/python The above is what you'll see if you have miniforge and you've correctly activated the ldm environment, and you used option 2 in the setup instructions above (\"no pyenv\"). bash (anaconda3-2022.05) % which python /Users/name/.pyenv/shims/python ... and the above is what you'll see if you used option 1 (\"Alongside pyenv\"). It's all a mess and you should know how to modify the path environment variable if you want to fix it. Here's a brief hint of all the ways you can modify it (don't really have the time to explain it all here). ~/.zshrc ~/.bash_profile ~/.bashrc /etc/paths.d /etc/path Which one you use will depend on what you have installed except putting a file in /etc/paths.d is what I prefer to do. Finally, to answer the question posed by this section's title, it may help to list all of the python / python3 things found in $PATH instead of just the one that will be executed by default. To do that, add the -a switch to which : % which -a python3 ... Debugging? # Tired of waiting for your renders to finish before you can see if it works? Reduce the steps! The image quality will be horrible but at least you'll get quick feedback. python ./scripts/txt2img.py --prompt \"ocean\" --ddim_steps 5 --n_samples 1 --n_iter 1 OSError: Can't load tokenizer for 'openai/clip-vit-large-patch14'... # python scripts/preload_models.py \"The operator [name] is not current implemented for the MPS device.\" (sic) # Example error. ``` ... NotImplementedError: The operator 'aten:: index_put_impl ' is not current implemented for the MPS device. If you want this op to be added in priority during the prototype phase of this feature, please comment on https://github.com/pytorch/pytorch/issues/77764 . As a temporary fix, you can set the environment variable PYTORCH_ENABLE_MPS_FALLBACK=1 to use the CPU as a fallback for this op. WARNING: this will be slower than running natively on MPS. ``` The lstein branch includes this fix in environment-mac.yaml . \"Could not build wheels for tokenizers\" # I have not seen this error because I had Rust installed on my computer before I started playing with Stable Diffusion. The fix is to install Rust. curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh How come --seed doesn't work? # First this: Completely reproducible results are not guaranteed across PyTorch releases, individual commits, or different platforms. Furthermore, results may not be reproducible between CPU and GPU executions, even when using identical seeds. PyTorch docs Second, we might have a fix that at least gets a consistent seed sort of. We're still working on it. libiomp5.dylib error? # OMP: Error #15: Initializing libiomp5.dylib, but found libomp.dylib already initialized. You are likely using an Intel package by mistake. Be sure to run conda with the environment variable CONDA_SUBDIR=osx-arm64 , like so: CONDA_SUBDIR=osx-arm64 conda install ... This error happens with Anaconda on Macs when the Intel-only mkl is pulled in by a dependency. nomkl is a metapackage designed to prevent this, by making it impossible to install mkl , but if your environment is already broken it may not work. Do not use os.environ['KMP_DUPLICATE_LIB_OK']='True' or equivalents as this masks the underlying issue of using Intel packages. Not enough memory # This seems to be a common problem and is probably the underlying problem for a lot of symptoms (listed below). The fix is to lower your image size or to add model.half() right after the model is loaded. I should probably test it out. I've read that the reason this fixes problems is because it converts the model from 32-bit to 16-bit and that leaves more RAM for other things. I have no idea how that would affect the quality of the images though. See this issue . \"Error: product of dimension sizes > 2**31'\" # This error happens with img2img, which I haven't played with too much yet. But I know it's because your image is too big or the resolution isn't a multiple of 32x32. Because the stable-diffusion model was trained on images that were 512 x 512, it's always best to use that output size (which is the default). However, if you're using that size and you get the above error, try 256 x 256 or 512 x 256 or something as the source image. BTW, 2**31-1 = 2,147,483,647 , which is also 32-bit signed LONG_MAX in C. I just got Rickrolled! Do I have a virus? # You don't have a virus. It's part of the project. Here's Rick and here's the code that swaps him in. It's a NSFW filter, which IMO, doesn't work very good (and we call this \"computer vision\", sheesh). Actually, this could be happening because there's not enough RAM. You could try the model.half() suggestion or specify smaller output images. My images come out black # We might have this fixed, we are still testing. There's a similar issue on CUDA GPU's where the images come out green. Maybe it's the same issue? Someone in that issue says to use \"--precision full\", but this fork actually disables that flag. I don't know why, someone else provided that code and I don't know what it does. Maybe the model.half() suggestion above would fix this issue too. I should probably test it. \"view size is not compatible with input tensor's size and stride\" # bash File \"/opt/anaconda3/envs/ldm/lib/python3.10/site-packages/torch/nn/functional.py\", line 2511, in layer_norm return torch.layer_norm(input, normalized_shape, weight, bias, eps, torch.backends.cudnn.enabled) RuntimeError: view size is not compatible with input tensor's size and stride (at least one dimension spans across two contiguous subspaces). Use .reshape(...) instead. Update to the latest version of lstein/stable-diffusion. We were patching pytorch but we found a file in stable-diffusion that we could change instead. This is a 32-bit vs 16-bit problem. The processor must support the Intel bla bla bla # What? Intel? On an Apple Silicon? bash Intel MKL FATAL ERROR: This system does not meet the minimum requirements for use of the Intel(R) Math Kernel Library. The processor must support the Intel(R) Supplemental Streaming SIMD Extensions 3 (Intel(R) SSSE3) instructions. The processor must support the Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) instructions. The processor must support the Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions. This is due to the Intel mkl package getting picked up when you try to install something that depends on it-- Rosetta can translate some Intel instructions but not the specialized ones here. To avoid this, make sure to use the environment variable CONDA_SUBDIR=osx-arm64 , which restricts the Conda environment to only use ARM packages, and use nomkl as described above. input types 'tensor<2x1280xf32>' and 'tensor<*xf16>' are not broadcast compatible # May appear when just starting to generate, e.g.: bash dream> clouds Generating: 0%| | 0/1 [00:00<?, ?it/s]/Users/[...]/dev/stable-diffusion/ldm/modules/embedding_manager.py:152: UserWarning: The operator 'aten::nonzero' is not currently supported on the MPS backend and will fall back to run on the CPU. This may have performance implications. (Triggered internally at /Users/runner/work/_temp/anaconda/conda-bld/pytorch_1662016319283/work/aten/src/ATen/mps/MPSFallback.mm:11.) placeholder_idx = torch.where( loc(\"mps_add\"(\"(mpsFileLoc): /AppleInternal/Library/BuildRoots/20d6c351-ee94-11ec-bcaf-7247572f23b4/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShadersGraph/mpsgraph/MetalPerformanceShadersGraph/Core/Files/MPSGraphUtilities.mm\":219:0)): error: input types 'tensor<2x1280xf32>' and 'tensor<*xf16>' are not broadcast compatible LLVM ERROR: Failed to infer result type(s). Abort trap: 6 /Users/[...]/opt/anaconda3/envs/ldm/lib/python3.9/multiprocessing/resource_tracker.py:216: UserWarning: resource_tracker: There appear to be 1 leaked semaphore objects to clean up at shutdown warnings.warn('resource_tracker: There appear to be %d ' Macs do not support autocast/mixed-precision , so you need to supply --full_precision to use float32 everywhere.","title":"macOS"},{"location":"installation/INSTALL_MAC/#requirements","text":"macOS 12.3 Monterey or later Python Patience Apple Silicon or Intel Mac Things have moved really fast and so these instructions change often and are often out-of-date. One of the problems is that there are so many different ways to run this. We are trying to build a testing setup so that when we make changes it doesn't always break. How to (this hasn't been 100% tested yet): First get the weights checkpoint download started - it's big: Sign up at https://huggingface.co Go to the Stable diffusion diffusion model page Accept the terms and click Access Repository: Download sd-v1-4.ckpt (4.27 GB) and note where you have saved it (probably the Downloads folder) While that is downloading, open Terminal and run the following commands one at a time. # install brew (and Xcode command line tools): /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh ) \" # Now there are two different routes to get the Python (miniconda) environment up and running: # 1. Alongside pyenv # 2. No pyenv # # If you don't know what we are talking about, choose 2. # # NOW EITHER DO # 1. Installing alongside pyenv brew install pyenv-virtualenv # you might have this from before, no problem pyenv install anaconda3-2022.05 pyenv virtualenv anaconda3-2022.05 eval \" $( pyenv init - ) \" pyenv activate anaconda3-2022.05 # OR, # 2. Installing standalone # install python 3, git, cmake, protobuf: brew install cmake protobuf rust # install miniconda for M1 arm64: curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh -o Miniconda3-latest-MacOSX-arm64.sh /bin/bash Miniconda3-latest-MacOSX-arm64.sh # OR install miniconda for Intel: curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -o Miniconda3-latest-MacOSX-x86_64.sh /bin/bash Miniconda3-latest-MacOSX-x86_64.sh # EITHER WAY, # continue from here # clone the repo git clone https://github.com/lstein/stable-diffusion.git cd stable-diffusion # # wait until the checkpoint file has downloaded, then proceed # # create symlink to checkpoint mkdir -p models/ldm/stable-diffusion-v1/ PATH_TO_CKPT = \" $HOME /Downloads\" # or wherever you saved sd-v1-4.ckpt ln -s \" $PATH_TO_CKPT /sd-v1-4.ckpt\" models/ldm/stable-diffusion-v1/model.ckpt # install packages for arm64 PIP_EXISTS_ACTION = w CONDA_SUBDIR = osx-arm64 conda env create -f environment-mac.yaml conda activate ldm # OR install packages for x86_64 PIP_EXISTS_ACTION = w CONDA_SUBDIR = osx-x86_64 conda env create -f environment-mac.yaml conda activate ldm # only need to do this once python scripts/preload_models.py # run SD! python scripts/dream.py --full_precision # half-precision requires autocast and won't work # or run the web interface! python scripts/dream.py --web The original scripts should work as well. python scripts/orig_scripts/txt2img.py --prompt \"a photograph of an astronaut riding a horse\" --plms Note, export PIP_EXISTS_ACTION = w is a precaution to fix conda env create -f environment-mac.yaml never finishing in some situations. So it isn't required but wont hurt. After you follow all the instructions and run dream.py you might get several errors. Here's the errors I've seen and found solutions for.","title":"Requirements"},{"location":"installation/INSTALL_MAC/#is-it-slow","text":"Be sure to specify 1 sample and 1 iteration. python ./scripts/orig_scripts/txt2img.py \\ --prompt \"ocean\" \\ --ddim_steps 5 \\ --n_samples 1 \\ --n_iter 1","title":"Is it slow?"},{"location":"installation/INSTALL_MAC/#doesnt-work-anymore","text":"PyTorch nightly includes support for MPS. Because of this, this setup is inherently unstable. One morning I woke up and it no longer worked no matter what I did until I switched to miniforge. However, I have another Mac that works just fine with Anaconda. If you can't get it to work, please search a little first because many of the errors will get posted and solved. If you can't find a solution please create an issue . One debugging step is to update to the latest version of PyTorch nightly. conda install pytorch torchvision torchaudio -c pytorch-nightly If it takes forever to run conda env create -f environment-mac.yaml you could try to run git clean -f followed by: conda clean --yes --all Or you could try to completley reset Anaconda: conda update --force-reinstall -y -n base -c defaults conda","title":"Doesn't work anymore?"},{"location":"installation/INSTALL_MAC/#no-module-named-cv2-torch-ldm-transformers-taming-etc","text":"There are several causes of these errors. First, did you remember to conda activate ldm ? If your terminal prompt begins with \"(ldm)\" then you activated it. If it begins with \"(base)\" or something else you haven't. Second, you might've run ./scripts/preload_models.py or ./scripts/dream.py instead of python ./scripts/preload_models.py or python ./scripts/dream.py . The cause of this error is long so it's below. Third, if it says you're missing taming you need to rebuild your virtual environment. ````bash conda deactivate conda env remove -n ldm PIP_EXISTS_ACTION=w CONDA_SUBDIR=osx-arm64 conda env create -f environment-mac.yaml ``` Fourth, If you have activated the ldm virtual environment and tried rebuilding it, maybe the problem could be that I have something installed that you don't and you'll just need to manually install it. Make sure you activate the virtual environment so it installs there instead of globally. conda activate ldm pip install _name_ You might also need to install Rust (I mention this again below).","title":"\"No module named cv2\", torch, 'ldm', 'transformers', 'taming', etc"},{"location":"installation/INSTALL_MAC/#how-many-snakes-are-living-in-your-computer","text":"You might have multiple Python installations on your system, in which case it's important to be explicit and consistent about which one to use for a given project. This is because virtual environments are coupled to the Python that created it (and all the associated 'system-level' modules). When you run python or python3 , your shell searches the colon-delimited locations in the PATH environment variable ( echo $PATH to see that list) in that order - first match wins. You can ask for the location of the first python3 found in your PATH with the which command like this: bash % which python3 /usr/bin/python3 Anything in /usr/bin is part of the OS . However, /usr/bin/python3 is not actually python3, but rather a stub that offers to install Xcode (which includes python 3). If you have Xcode installed already, /usr/bin/python3 will execute /Library/Developer/CommandLineTools/usr/bin/python3 or /Applications/Xcode.app/Contents/Developer/usr/bin/python3 (depending on which Xcode you've selected with xcode-select ). Note that /usr/bin/python is an entirely different python - specifically, python 2. Note: starting in macOS 12.3, /usr/bin/python no longer exists. bash % which python3 /opt/homebrew/bin/python3 If you installed python3 with Homebrew and you've modified your path to search for Homebrew binaries before system ones, you'll see the above path. bash % which python /opt/anaconda3/bin/python If you have Anaconda installed, you will see the above path. There is a /opt/anaconda3/bin/python3 also. We expect that /opt/anaconda3/bin/python and /opt/anaconda3/bin/python3 should actually be the same python , which you can verify by comparing the output of python3 -V and python -V . bash (ldm) % which python /Users/name/miniforge3/envs/ldm/bin/python The above is what you'll see if you have miniforge and you've correctly activated the ldm environment, and you used option 2 in the setup instructions above (\"no pyenv\"). bash (anaconda3-2022.05) % which python /Users/name/.pyenv/shims/python ... and the above is what you'll see if you used option 1 (\"Alongside pyenv\"). It's all a mess and you should know how to modify the path environment variable if you want to fix it. Here's a brief hint of all the ways you can modify it (don't really have the time to explain it all here). ~/.zshrc ~/.bash_profile ~/.bashrc /etc/paths.d /etc/path Which one you use will depend on what you have installed except putting a file in /etc/paths.d is what I prefer to do. Finally, to answer the question posed by this section's title, it may help to list all of the python / python3 things found in $PATH instead of just the one that will be executed by default. To do that, add the -a switch to which : % which -a python3 ...","title":"How many snakes are living in your computer?"},{"location":"installation/INSTALL_MAC/#debugging","text":"Tired of waiting for your renders to finish before you can see if it works? Reduce the steps! The image quality will be horrible but at least you'll get quick feedback. python ./scripts/txt2img.py --prompt \"ocean\" --ddim_steps 5 --n_samples 1 --n_iter 1","title":"Debugging?"},{"location":"installation/INSTALL_MAC/#oserror-cant-load-tokenizer-for-openaiclip-vit-large-patch14","text":"python scripts/preload_models.py","title":"OSError: Can't load tokenizer for 'openai/clip-vit-large-patch14'..."},{"location":"installation/INSTALL_MAC/#the-operator-name-is-not-current-implemented-for-the-mps-device-sic","text":"Example error. ``` ... NotImplementedError: The operator 'aten:: index_put_impl ' is not current implemented for the MPS device. If you want this op to be added in priority during the prototype phase of this feature, please comment on https://github.com/pytorch/pytorch/issues/77764 . As a temporary fix, you can set the environment variable PYTORCH_ENABLE_MPS_FALLBACK=1 to use the CPU as a fallback for this op. WARNING: this will be slower than running natively on MPS. ``` The lstein branch includes this fix in environment-mac.yaml .","title":"\"The operator [name] is not current implemented for the MPS device.\" (sic)"},{"location":"installation/INSTALL_MAC/#could-not-build-wheels-for-tokenizers","text":"I have not seen this error because I had Rust installed on my computer before I started playing with Stable Diffusion. The fix is to install Rust. curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh","title":"\"Could not build wheels for tokenizers\""},{"location":"installation/INSTALL_MAC/#how-come-seed-doesnt-work","text":"First this: Completely reproducible results are not guaranteed across PyTorch releases, individual commits, or different platforms. Furthermore, results may not be reproducible between CPU and GPU executions, even when using identical seeds. PyTorch docs Second, we might have a fix that at least gets a consistent seed sort of. We're still working on it.","title":"How come --seed doesn't work?"},{"location":"installation/INSTALL_MAC/#libiomp5dylib-error","text":"OMP: Error #15: Initializing libiomp5.dylib, but found libomp.dylib already initialized. You are likely using an Intel package by mistake. Be sure to run conda with the environment variable CONDA_SUBDIR=osx-arm64 , like so: CONDA_SUBDIR=osx-arm64 conda install ... This error happens with Anaconda on Macs when the Intel-only mkl is pulled in by a dependency. nomkl is a metapackage designed to prevent this, by making it impossible to install mkl , but if your environment is already broken it may not work. Do not use os.environ['KMP_DUPLICATE_LIB_OK']='True' or equivalents as this masks the underlying issue of using Intel packages.","title":"libiomp5.dylib error?"},{"location":"installation/INSTALL_MAC/#not-enough-memory","text":"This seems to be a common problem and is probably the underlying problem for a lot of symptoms (listed below). The fix is to lower your image size or to add model.half() right after the model is loaded. I should probably test it out. I've read that the reason this fixes problems is because it converts the model from 32-bit to 16-bit and that leaves more RAM for other things. I have no idea how that would affect the quality of the images though. See this issue .","title":"Not enough memory"},{"location":"installation/INSTALL_MAC/#error-product-of-dimension-sizes-231","text":"This error happens with img2img, which I haven't played with too much yet. But I know it's because your image is too big or the resolution isn't a multiple of 32x32. Because the stable-diffusion model was trained on images that were 512 x 512, it's always best to use that output size (which is the default). However, if you're using that size and you get the above error, try 256 x 256 or 512 x 256 or something as the source image. BTW, 2**31-1 = 2,147,483,647 , which is also 32-bit signed LONG_MAX in C.","title":"\"Error: product of dimension sizes &gt; 2**31'\""},{"location":"installation/INSTALL_MAC/#i-just-got-rickrolled-do-i-have-a-virus","text":"You don't have a virus. It's part of the project. Here's Rick and here's the code that swaps him in. It's a NSFW filter, which IMO, doesn't work very good (and we call this \"computer vision\", sheesh). Actually, this could be happening because there's not enough RAM. You could try the model.half() suggestion or specify smaller output images.","title":"I just got Rickrolled! Do I have a virus?"},{"location":"installation/INSTALL_MAC/#my-images-come-out-black","text":"We might have this fixed, we are still testing. There's a similar issue on CUDA GPU's where the images come out green. Maybe it's the same issue? Someone in that issue says to use \"--precision full\", but this fork actually disables that flag. I don't know why, someone else provided that code and I don't know what it does. Maybe the model.half() suggestion above would fix this issue too. I should probably test it.","title":"My images come out black"},{"location":"installation/INSTALL_MAC/#view-size-is-not-compatible-with-input-tensors-size-and-stride","text":"bash File \"/opt/anaconda3/envs/ldm/lib/python3.10/site-packages/torch/nn/functional.py\", line 2511, in layer_norm return torch.layer_norm(input, normalized_shape, weight, bias, eps, torch.backends.cudnn.enabled) RuntimeError: view size is not compatible with input tensor's size and stride (at least one dimension spans across two contiguous subspaces). Use .reshape(...) instead. Update to the latest version of lstein/stable-diffusion. We were patching pytorch but we found a file in stable-diffusion that we could change instead. This is a 32-bit vs 16-bit problem.","title":"\"view size is not compatible with input tensor's size and stride\""},{"location":"installation/INSTALL_MAC/#the-processor-must-support-the-intel-bla-bla-bla","text":"What? Intel? On an Apple Silicon? bash Intel MKL FATAL ERROR: This system does not meet the minimum requirements for use of the Intel(R) Math Kernel Library. The processor must support the Intel(R) Supplemental Streaming SIMD Extensions 3 (Intel(R) SSSE3) instructions. The processor must support the Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) instructions. The processor must support the Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions. This is due to the Intel mkl package getting picked up when you try to install something that depends on it-- Rosetta can translate some Intel instructions but not the specialized ones here. To avoid this, make sure to use the environment variable CONDA_SUBDIR=osx-arm64 , which restricts the Conda environment to only use ARM packages, and use nomkl as described above.","title":"The processor must support the Intel bla bla bla"},{"location":"installation/INSTALL_MAC/#input-types-tensor2x1280xf32-and-tensorxf16-are-not-broadcast-compatible","text":"May appear when just starting to generate, e.g.: bash dream> clouds Generating: 0%| | 0/1 [00:00<?, ?it/s]/Users/[...]/dev/stable-diffusion/ldm/modules/embedding_manager.py:152: UserWarning: The operator 'aten::nonzero' is not currently supported on the MPS backend and will fall back to run on the CPU. This may have performance implications. (Triggered internally at /Users/runner/work/_temp/anaconda/conda-bld/pytorch_1662016319283/work/aten/src/ATen/mps/MPSFallback.mm:11.) placeholder_idx = torch.where( loc(\"mps_add\"(\"(mpsFileLoc): /AppleInternal/Library/BuildRoots/20d6c351-ee94-11ec-bcaf-7247572f23b4/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShadersGraph/mpsgraph/MetalPerformanceShadersGraph/Core/Files/MPSGraphUtilities.mm\":219:0)): error: input types 'tensor<2x1280xf32>' and 'tensor<*xf16>' are not broadcast compatible LLVM ERROR: Failed to infer result type(s). Abort trap: 6 /Users/[...]/opt/anaconda3/envs/ldm/lib/python3.9/multiprocessing/resource_tracker.py:216: UserWarning: resource_tracker: There appear to be 1 leaked semaphore objects to clean up at shutdown warnings.warn('resource_tracker: There appear to be %d ' Macs do not support autocast/mixed-precision , so you need to supply --full_precision to use float32 everywhere.","title":"input types 'tensor&lt;2x1280xf32&gt;' and 'tensor&lt;*xf16&gt;' are not broadcast compatible"},{"location":"installation/INSTALL_WINDOWS/","text":"Notebook install (semi-automated) # We have a Jupyter notebook with cell-by-cell installation steps. It will download the code in this repo as one of the steps, so instead of cloning this repo, simply download the notebook from the link above and load it up in VSCode (with the appropriate extensions installed)/Jupyter/JupyterLab and start running the cells one-by-one. Note that you will need NVIDIA drivers, Python 3.10, and Git installed beforehand - simplified step-by-step instructions are available in the wiki (you'll only need steps 1, 2, & 3 ). Manual Install # pip # See Easy-peasy Windows install in the wiki Conda # Install Anaconda3 (miniconda3 version) from here: https://docs.anaconda.com/anaconda/install/windows/ Install Git from here: https://git-scm.com/download/win Launch Anaconda from the Windows Start menu. This will bring up a command window. Type all the remaining commands in this window. Run the command: git clone https://github.com/lstein/stable-diffusion.git This will create stable-diffusion folder where you will follow the rest of the steps. Enter the newly-created stable-diffusion folder. From this step forward make sure that you are working in the stable-diffusion directory! cd stable-diffusion Run the following two commands: conda env create -f environment.yaml ( step 6a ) conda activate ldm ( step 6b ) This will install all python requirements and activate the \"ldm\" environment which sets PATH and other environment variables properly. Run the command: python scripts \\p reload_models.py This installs several machine learning models that stable diffusion requires. Note: This step is required. This was done because some users may might be blocked by firewalls or have limited internet connectivity for the models to be downloaded just-in-time. Now you need to install the weights for the big stable diffusion model. For running with the released weights, you will first need to set up an acount with Hugging Face ( https://huggingface.co ). Use your credentials to log in, and then point your browser at https://huggingface.co/CompVis/stable-diffusion-v-1-4-original . You may be asked to sign a license agreement at this point. Click on \"Files and versions\" near the top of the page, and then click on the file named sd-v1-4.ckpt . You'll be taken to a page that prompts you to click the \"download\" link. Now save the file somewhere safe on your local machine. The weight file is >4 GB in size, so downloading may take a while. Now run the following commands from within the stable-diffusion directory to copy the weights file to the right place: mkdir -p models \\l dm \\s table-diffusion-v1 copy C: \\p ath \\t o \\s d-v1-4.ckpt models \\l dm \\s table-diffusion-v1 \\m odel.ckpt Please replace C:\\path\\to\\sd-v1.4.ckpt with the correct path to wherever you stashed this file. If you prefer not to copy or move the .ckpt file, you may instead create a shortcut to it from within models\\ldm\\stable-diffusion-v1\\ . Start generating images! # for the pre-release weights python scripts \\d ream.py -l # for the post-release weights python scripts \\d ream.py Subsequently, to relaunch the script, first activate the Anaconda command window (step 3),enter the stable-diffusion directory (step 5, cd \\path\\to\\stable-diffusion ), run conda activate ldm (step 6b), and then launch the dream script (step 9). Note: Tildebyte has written an alternative \"Easy peasy Windows install\" which uses the Windows Powershell and pew. If you are having trouble with Anaconda on Windows, give this a try (or try it first!) Updating to newer versions of the script # This distribution is changing rapidly. If you used the git clone method (step 5) to download the stable-diffusion directory, then to update to the latest and greatest version, launch the Anaconda window, enter stable-diffusion , and type: git pull conda env update -f environment.yaml This will bring your local copy into sync with the remote one.","title":"Windows"},{"location":"installation/INSTALL_WINDOWS/#notebook-install-semi-automated","text":"We have a Jupyter notebook with cell-by-cell installation steps. It will download the code in this repo as one of the steps, so instead of cloning this repo, simply download the notebook from the link above and load it up in VSCode (with the appropriate extensions installed)/Jupyter/JupyterLab and start running the cells one-by-one. Note that you will need NVIDIA drivers, Python 3.10, and Git installed beforehand - simplified step-by-step instructions are available in the wiki (you'll only need steps 1, 2, & 3 ).","title":"Notebook install (semi-automated)"},{"location":"installation/INSTALL_WINDOWS/#manual-install","text":"","title":"Manual Install"},{"location":"installation/INSTALL_WINDOWS/#pip","text":"See Easy-peasy Windows install in the wiki","title":"pip"},{"location":"installation/INSTALL_WINDOWS/#conda","text":"Install Anaconda3 (miniconda3 version) from here: https://docs.anaconda.com/anaconda/install/windows/ Install Git from here: https://git-scm.com/download/win Launch Anaconda from the Windows Start menu. This will bring up a command window. Type all the remaining commands in this window. Run the command: git clone https://github.com/lstein/stable-diffusion.git This will create stable-diffusion folder where you will follow the rest of the steps. Enter the newly-created stable-diffusion folder. From this step forward make sure that you are working in the stable-diffusion directory! cd stable-diffusion Run the following two commands: conda env create -f environment.yaml ( step 6a ) conda activate ldm ( step 6b ) This will install all python requirements and activate the \"ldm\" environment which sets PATH and other environment variables properly. Run the command: python scripts \\p reload_models.py This installs several machine learning models that stable diffusion requires. Note: This step is required. This was done because some users may might be blocked by firewalls or have limited internet connectivity for the models to be downloaded just-in-time. Now you need to install the weights for the big stable diffusion model. For running with the released weights, you will first need to set up an acount with Hugging Face ( https://huggingface.co ). Use your credentials to log in, and then point your browser at https://huggingface.co/CompVis/stable-diffusion-v-1-4-original . You may be asked to sign a license agreement at this point. Click on \"Files and versions\" near the top of the page, and then click on the file named sd-v1-4.ckpt . You'll be taken to a page that prompts you to click the \"download\" link. Now save the file somewhere safe on your local machine. The weight file is >4 GB in size, so downloading may take a while. Now run the following commands from within the stable-diffusion directory to copy the weights file to the right place: mkdir -p models \\l dm \\s table-diffusion-v1 copy C: \\p ath \\t o \\s d-v1-4.ckpt models \\l dm \\s table-diffusion-v1 \\m odel.ckpt Please replace C:\\path\\to\\sd-v1.4.ckpt with the correct path to wherever you stashed this file. If you prefer not to copy or move the .ckpt file, you may instead create a shortcut to it from within models\\ldm\\stable-diffusion-v1\\ . Start generating images! # for the pre-release weights python scripts \\d ream.py -l # for the post-release weights python scripts \\d ream.py Subsequently, to relaunch the script, first activate the Anaconda command window (step 3),enter the stable-diffusion directory (step 5, cd \\path\\to\\stable-diffusion ), run conda activate ldm (step 6b), and then launch the dream script (step 9). Note: Tildebyte has written an alternative \"Easy peasy Windows install\" which uses the Windows Powershell and pew. If you are having trouble with Anaconda on Windows, give this a try (or try it first!)","title":"Conda"},{"location":"installation/INSTALL_WINDOWS/#updating-to-newer-versions-of-the-script","text":"This distribution is changing rapidly. If you used the git clone method (step 5) to download the stable-diffusion directory, then to update to the latest and greatest version, launch the Anaconda window, enter stable-diffusion , and type: git pull conda env update -f environment.yaml This will bring your local copy into sync with the remote one.","title":"Updating to newer versions of the script"},{"location":"other/CONTRIBUTORS/","text":"The list of all the amazing people who have contributed to the various features that you get to experience in this fork. We thank them for all of their time and hard work. Original Author: # Lincoln D. Stein Contributions by: # Sean McLellan Kevin Gibbons Tesseract Cat blessedcoolant David Ford yunsaki James Reynolds David Wager Jason Toffaletti tildebyte Cragin Godley BlueAmulet Benjamin Warner Cora Johnson-Roberson veprogames JigenD Niek van der Maas Henry van Megen H\u00e5vard Gulldahl greentext2 Simon Vans-Colina Gabriel Rotbart Eric Khun Brent Ozar nderscore Mikhail Tishin Tom Elovi Spruce spezialspezial Yosuke Shinya Andy Pilate Muhammad Usama Arturo Mendivil Paul Sajna Samuel Husso nicolai256 Mihai Any Winter Doggettx Matthias Wild Kyle Schouviller Original CompVis Authors: # Robin Rombach Patrick von Platen ablattmann Patrick Esser owenvincent apolinario Charles Packer If you have contributed and don't see your name on the list of contributors, please let one of the collaborators know about the omission, or feel free to make a pull request.","title":"Contributors"},{"location":"other/CONTRIBUTORS/#original-author","text":"Lincoln D. Stein","title":"Original Author:"},{"location":"other/CONTRIBUTORS/#contributions-by","text":"Sean McLellan Kevin Gibbons Tesseract Cat blessedcoolant David Ford yunsaki James Reynolds David Wager Jason Toffaletti tildebyte Cragin Godley BlueAmulet Benjamin Warner Cora Johnson-Roberson veprogames JigenD Niek van der Maas Henry van Megen H\u00e5vard Gulldahl greentext2 Simon Vans-Colina Gabriel Rotbart Eric Khun Brent Ozar nderscore Mikhail Tishin Tom Elovi Spruce spezialspezial Yosuke Shinya Andy Pilate Muhammad Usama Arturo Mendivil Paul Sajna Samuel Husso nicolai256 Mihai Any Winter Doggettx Matthias Wild Kyle Schouviller","title":"Contributions by:"},{"location":"other/CONTRIBUTORS/#original-compvis-authors","text":"Robin Rombach Patrick von Platen ablattmann Patrick Esser owenvincent apolinario Charles Packer If you have contributed and don't see your name on the list of contributors, please let one of the collaborators know about the omission, or feel free to make a pull request.","title":"Original CompVis Authors:"},{"location":"other/README-CompViz/","text":"README from CompViz/stable-diffusion # Stable Diffusion was made possible thanks to a collaboration with Stability AI and Runway and builds upon our previous work: High-Resolution Image Synthesis with Latent Diffusion Models Robin Rombach *, Andreas Blattmann *, Dominik Lorenz \\, Patrick Esser , Bj\u00f6rn Ommer CVPR '22 Oral # which is available on GitHub . PDF at arXiv . Please also visit our Project page . Stable Diffusion is a latent text-to-image diffusion model. Thanks to a generous compute donation from Stability AI and support from LAION , we were able to train a Latent Diffusion Model on 512x512 images from a subset of the LAION-5B database. Similar to Google's Imagen , this model uses a frozen CLIP ViT-L/14 text encoder to condition the model on text prompts. With its 860M UNet and 123M text encoder, the model is relatively lightweight and runs on a GPU with at least 10GB VRAM. See this section below and the model card . Requirements # A suitable conda environment named ldm can be created and activated with: conda env create -f environment.yaml conda activate ldm You can also update an existing latent diffusion environment by running conda install pytorch torchvision -c pytorch pip install transformers == 4 .19.2 pip install -e . Stable Diffusion v1 # Stable Diffusion v1 refers to a specific configuration of the model architecture that uses a downsampling-factor 8 autoencoder with an 860M UNet and CLIP ViT-L/14 text encoder for the diffusion model. The model was pretrained on 256x256 images and then finetuned on 512x512 images. *Note: Stable Diffusion v1 is a general text-to-image diffusion model and therefore mirrors biases and (mis-)conceptions that are present in its training data. Details on the training procedure and data, as well as the intended use of the model can be found in the corresponding model card . Research into the safe deployment of general text-to-image models is an ongoing effort. To prevent misuse and harm, we currently provide access to the checkpoints only for academic research purposes upon request . This is an experiment in safe and community-driven publication of a capable and general text-to-image model. We are working on a public release with a more permissive license that also incorporates ethical considerations.* Request access to Stable Diffusion v1 checkpoints for academic research Weights # We currently provide three checkpoints, sd-v1-1.ckpt , sd-v1-2.ckpt and sd-v1-3.ckpt , which were trained as follows, sd-v1-1.ckpt : 237k steps at resolution 256x256 on laion2B-en . 194k steps at resolution 512x512 on laion-high-resolution (170M examples from LAION-5B with resolution >= 1024x1024 ). sd-v1-2.ckpt : Resumed from sd-v1-1.ckpt . 515k steps at resolution 512x512 on \"laion-improved-aesthetics\" (a subset of laion2B-en, filtered to images with an original size >= 512x512 , estimated aesthetics score > 5.0 , and an estimated watermark probability < 0.5 . The watermark estimate is from the LAION-5B metadata, the aesthetics score is estimated using an improved aesthetics estimator ). sd-v1-3.ckpt : Resumed from sd-v1-2.ckpt . 195k steps at resolution 512x512 on \"laion-improved-aesthetics\" and 10\\% dropping of the text-conditioning to improve classifier-free guidance sampling . Evaluations with different classifier-free guidance scales (1.5, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0) and 50 PLMS sampling steps show the relative improvements of the checkpoints: Text-to-Image with Stable Diffusion # Stable Diffusion is a latent diffusion model conditioned on the (non-pooled) text embeddings of a CLIP ViT-L/14 text encoder. Sampling Script # After obtaining the weights , link them mkdir -p models/ldm/stable-diffusion-v1/ ln -s <path/to/model.ckpt> models/ldm/stable-diffusion-v1/model.ckpt and sample with python scripts/txt2img.py --prompt \"a photograph of an astronaut riding a horse\" --plms By default, this uses a guidance scale of --scale 7.5 , Katherine Crowson's implementation of the PLMS sampler, and renders images of size 512x512 (which it was trained on) in 50 steps. All supported arguments are listed below (type python scripts/txt2img.py --help ). usage: txt2img.py [-h] [--prompt [PROMPT]] [--outdir [OUTDIR]] [--skip_grid] [--skip_save] [--ddim_steps DDIM_STEPS] [--plms] [--laion400m] [--fixed_code] [--ddim_eta DDIM_ETA] [--n_iter N_ITER] [--H H] [--W W] [--C C] [--f F] [--n_samples N_SAMPLES] [--n_rows N_ROWS] [--scale SCALE] [--from-file FROM_FILE] [--config CONFIG] [--ckpt CKPT] [--seed SEED] [--precision {full,autocast}] optional arguments: -h, --help show this help message and exit --prompt [PROMPT] the prompt to render --outdir [OUTDIR] dir to write results to --skip_grid do not save a grid, only individual samples. Helpful when evaluating lots of samples --skip_save do not save individual samples. For speed measurements. --ddim_steps DDIM_STEPS number of ddim sampling steps --plms use plms sampling --laion400m uses the LAION400M model --fixed_code if enabled, uses the same starting code across samples --ddim_eta DDIM_ETA ddim eta (eta=0.0 corresponds to deterministic sampling --n_iter N_ITER sample this often --H H image height, in pixel space --W W image width, in pixel space --C C latent channels --f F downsampling factor --n_samples N_SAMPLES how many samples to produce for each given prompt. A.k.a. batch size (note that the seeds for each image in the batch will be unavailable) --n_rows N_ROWS rows in the grid (default: n_samples) --scale SCALE unconditional guidance scale: eps = eps(x, empty) + scale * (eps(x, cond) - eps(x, empty)) --from-file FROM_FILE if specified, load prompts from this file --config CONFIG path to config which constructs model --ckpt CKPT path to checkpoint of model --seed SEED the seed (for reproducible sampling) --precision {full,autocast} evaluate at this precision Note: The inference config for all v1 versions is designed to be used with EMA-only checkpoints. For this reason use_ema=False is set in the configuration, otherwise the code will try to switch from non-EMA to EMA weights. If you want to examine the effect of EMA vs no EMA, we provide \"full\" checkpoints which contain both types of weights. For these, use_ema=False will load and use the non-EMA weights. Diffusers Integration # Another way to download and sample Stable Diffusion is by using the diffusers library # make sure you're logged in with `huggingface-cli login` from torch import autocast from diffusers import StableDiffusionPipeline , LMSDiscreteScheduler pipe = StableDiffusionPipeline . from_pretrained ( \"CompVis/stable-diffusion-v1-3-diffusers\" , use_auth_token = True ) prompt = \"a photo of an astronaut riding a horse on mars\" with autocast ( \"cuda\" ): image = pipe ( prompt )[ \"sample\" ][ 0 ] image . save ( \"astronaut_rides_horse.png\" ) Image Modification with Stable Diffusion # By using a diffusion-denoising mechanism as first proposed by SDEdit , the model can be used for different tasks such as text-guided image-to-image translation and upscaling. Similar to the txt2img sampling script, we provide a script to perform image modification with Stable Diffusion. The following describes an example where a rough sketch made in Pinta is converted into a detailed artwork. python scripts/img2img.py --prompt \"A fantasy landscape, trending on artstation\" --init-img <path-to-img.jpg> --strength 0.8 Here, strength is a value between 0.0 and 1.0, that controls the amount of noise that is added to the input image. Values that approach 1.0 allow for lots of variations but will also produce images that are not semantically consistent with the input. See the following example. Input Outputs This procedure can, for example, also be used to upscale samples from the base model. Comments # Our codebase for the diffusion models builds heavily on OpenAI's ADM codebase and https://github.com/lucidrains/denoising-diffusion-pytorch . Thanks for open-sourcing! The implementation of the transformer encoder is from x-transformers by lucidrains . BibTeX # @misc{rombach2021highresolution, title={High-Resolution Image Synthesis with Latent Diffusion Models}, author={Robin Rombach and Andreas Blattmann and Dominik Lorenz and Patrick Esser and Bj\u00f6rn Ommer}, year={2021}, eprint={2112.10752}, archivePrefix={arXiv}, primaryClass={cs.CV} }","title":"CompViz-Readme"},{"location":"other/README-CompViz/#readme-from-compvizstable-diffusion","text":"Stable Diffusion was made possible thanks to a collaboration with Stability AI and Runway and builds upon our previous work: High-Resolution Image Synthesis with Latent Diffusion Models Robin Rombach *, Andreas Blattmann *, Dominik Lorenz \\, Patrick Esser , Bj\u00f6rn Ommer","title":"README from CompViz/stable-diffusion"},{"location":"other/README-CompViz/#cvpr-22-oral","text":"which is available on GitHub . PDF at arXiv . Please also visit our Project page . Stable Diffusion is a latent text-to-image diffusion model. Thanks to a generous compute donation from Stability AI and support from LAION , we were able to train a Latent Diffusion Model on 512x512 images from a subset of the LAION-5B database. Similar to Google's Imagen , this model uses a frozen CLIP ViT-L/14 text encoder to condition the model on text prompts. With its 860M UNet and 123M text encoder, the model is relatively lightweight and runs on a GPU with at least 10GB VRAM. See this section below and the model card .","title":"CVPR '22 Oral"},{"location":"other/README-CompViz/#requirements","text":"A suitable conda environment named ldm can be created and activated with: conda env create -f environment.yaml conda activate ldm You can also update an existing latent diffusion environment by running conda install pytorch torchvision -c pytorch pip install transformers == 4 .19.2 pip install -e .","title":"Requirements"},{"location":"other/README-CompViz/#stable-diffusion-v1","text":"Stable Diffusion v1 refers to a specific configuration of the model architecture that uses a downsampling-factor 8 autoencoder with an 860M UNet and CLIP ViT-L/14 text encoder for the diffusion model. The model was pretrained on 256x256 images and then finetuned on 512x512 images. *Note: Stable Diffusion v1 is a general text-to-image diffusion model and therefore mirrors biases and (mis-)conceptions that are present in its training data. Details on the training procedure and data, as well as the intended use of the model can be found in the corresponding model card . Research into the safe deployment of general text-to-image models is an ongoing effort. To prevent misuse and harm, we currently provide access to the checkpoints only for academic research purposes upon request . This is an experiment in safe and community-driven publication of a capable and general text-to-image model. We are working on a public release with a more permissive license that also incorporates ethical considerations.* Request access to Stable Diffusion v1 checkpoints for academic research","title":"Stable Diffusion v1"},{"location":"other/README-CompViz/#weights","text":"We currently provide three checkpoints, sd-v1-1.ckpt , sd-v1-2.ckpt and sd-v1-3.ckpt , which were trained as follows, sd-v1-1.ckpt : 237k steps at resolution 256x256 on laion2B-en . 194k steps at resolution 512x512 on laion-high-resolution (170M examples from LAION-5B with resolution >= 1024x1024 ). sd-v1-2.ckpt : Resumed from sd-v1-1.ckpt . 515k steps at resolution 512x512 on \"laion-improved-aesthetics\" (a subset of laion2B-en, filtered to images with an original size >= 512x512 , estimated aesthetics score > 5.0 , and an estimated watermark probability < 0.5 . The watermark estimate is from the LAION-5B metadata, the aesthetics score is estimated using an improved aesthetics estimator ). sd-v1-3.ckpt : Resumed from sd-v1-2.ckpt . 195k steps at resolution 512x512 on \"laion-improved-aesthetics\" and 10\\% dropping of the text-conditioning to improve classifier-free guidance sampling . Evaluations with different classifier-free guidance scales (1.5, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0) and 50 PLMS sampling steps show the relative improvements of the checkpoints:","title":"Weights"},{"location":"other/README-CompViz/#text-to-image-with-stable-diffusion","text":"Stable Diffusion is a latent diffusion model conditioned on the (non-pooled) text embeddings of a CLIP ViT-L/14 text encoder.","title":"Text-to-Image with Stable Diffusion"},{"location":"other/README-CompViz/#sampling-script","text":"After obtaining the weights , link them mkdir -p models/ldm/stable-diffusion-v1/ ln -s <path/to/model.ckpt> models/ldm/stable-diffusion-v1/model.ckpt and sample with python scripts/txt2img.py --prompt \"a photograph of an astronaut riding a horse\" --plms By default, this uses a guidance scale of --scale 7.5 , Katherine Crowson's implementation of the PLMS sampler, and renders images of size 512x512 (which it was trained on) in 50 steps. All supported arguments are listed below (type python scripts/txt2img.py --help ). usage: txt2img.py [-h] [--prompt [PROMPT]] [--outdir [OUTDIR]] [--skip_grid] [--skip_save] [--ddim_steps DDIM_STEPS] [--plms] [--laion400m] [--fixed_code] [--ddim_eta DDIM_ETA] [--n_iter N_ITER] [--H H] [--W W] [--C C] [--f F] [--n_samples N_SAMPLES] [--n_rows N_ROWS] [--scale SCALE] [--from-file FROM_FILE] [--config CONFIG] [--ckpt CKPT] [--seed SEED] [--precision {full,autocast}] optional arguments: -h, --help show this help message and exit --prompt [PROMPT] the prompt to render --outdir [OUTDIR] dir to write results to --skip_grid do not save a grid, only individual samples. Helpful when evaluating lots of samples --skip_save do not save individual samples. For speed measurements. --ddim_steps DDIM_STEPS number of ddim sampling steps --plms use plms sampling --laion400m uses the LAION400M model --fixed_code if enabled, uses the same starting code across samples --ddim_eta DDIM_ETA ddim eta (eta=0.0 corresponds to deterministic sampling --n_iter N_ITER sample this often --H H image height, in pixel space --W W image width, in pixel space --C C latent channels --f F downsampling factor --n_samples N_SAMPLES how many samples to produce for each given prompt. A.k.a. batch size (note that the seeds for each image in the batch will be unavailable) --n_rows N_ROWS rows in the grid (default: n_samples) --scale SCALE unconditional guidance scale: eps = eps(x, empty) + scale * (eps(x, cond) - eps(x, empty)) --from-file FROM_FILE if specified, load prompts from this file --config CONFIG path to config which constructs model --ckpt CKPT path to checkpoint of model --seed SEED the seed (for reproducible sampling) --precision {full,autocast} evaluate at this precision Note: The inference config for all v1 versions is designed to be used with EMA-only checkpoints. For this reason use_ema=False is set in the configuration, otherwise the code will try to switch from non-EMA to EMA weights. If you want to examine the effect of EMA vs no EMA, we provide \"full\" checkpoints which contain both types of weights. For these, use_ema=False will load and use the non-EMA weights.","title":"Sampling Script"},{"location":"other/README-CompViz/#diffusers-integration","text":"Another way to download and sample Stable Diffusion is by using the diffusers library # make sure you're logged in with `huggingface-cli login` from torch import autocast from diffusers import StableDiffusionPipeline , LMSDiscreteScheduler pipe = StableDiffusionPipeline . from_pretrained ( \"CompVis/stable-diffusion-v1-3-diffusers\" , use_auth_token = True ) prompt = \"a photo of an astronaut riding a horse on mars\" with autocast ( \"cuda\" ): image = pipe ( prompt )[ \"sample\" ][ 0 ] image . save ( \"astronaut_rides_horse.png\" )","title":"Diffusers Integration"},{"location":"other/README-CompViz/#image-modification-with-stable-diffusion","text":"By using a diffusion-denoising mechanism as first proposed by SDEdit , the model can be used for different tasks such as text-guided image-to-image translation and upscaling. Similar to the txt2img sampling script, we provide a script to perform image modification with Stable Diffusion. The following describes an example where a rough sketch made in Pinta is converted into a detailed artwork. python scripts/img2img.py --prompt \"A fantasy landscape, trending on artstation\" --init-img <path-to-img.jpg> --strength 0.8 Here, strength is a value between 0.0 and 1.0, that controls the amount of noise that is added to the input image. Values that approach 1.0 allow for lots of variations but will also produce images that are not semantically consistent with the input. See the following example. Input Outputs This procedure can, for example, also be used to upscale samples from the base model.","title":"Image Modification with Stable Diffusion"},{"location":"other/README-CompViz/#comments","text":"Our codebase for the diffusion models builds heavily on OpenAI's ADM codebase and https://github.com/lucidrains/denoising-diffusion-pytorch . Thanks for open-sourcing! The implementation of the transformer encoder is from x-transformers by lucidrains .","title":"Comments"},{"location":"other/README-CompViz/#bibtex","text":"@misc{rombach2021highresolution, title={High-Resolution Image Synthesis with Latent Diffusion Models}, author={Robin Rombach and Andreas Blattmann and Dominik Lorenz and Patrick Esser and Bj\u00f6rn Ommer}, year={2021}, eprint={2112.10752}, archivePrefix={arXiv}, primaryClass={cs.CV} }","title":"BibTeX"}]}